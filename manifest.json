{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.7", "generated_at": "2024-02-21T22:07:22.238104Z", "invocation_id": "dcd1ecee-97cb-4f7f-bb26-d8ec04ae1333", "env": {}, "project_name": "recordtrak", "project_id": "10dfaa225d3a42ddced3a3642ec708ef", "user_id": "bfdaa2b9-51eb-4775-b03c-a83cd0e83519", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.recordtrak.data_refresh_timestamp": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "data_refresh_timestamp", "resource_type": "model", "package_name": "recordtrak", "path": "final\\data_refresh_timestamp.sql", "original_file_path": "models\\final\\data_refresh_timestamp.sql", "unique_id": "model.recordtrak.data_refresh_timestamp", "fqn": ["recordtrak", "final", "data_refresh_timestamp"], "alias": "data_refresh_timestamp", "checksum": {"name": "sha256", "checksum": "faa9947074b62b77c2851aa776f81f8bdf5aead6549b077fcea504a4b9268b83"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "description", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["description", "created_ts"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "description", "incremental_stretegy": "merge", "merge_exclude_columns": ["description", "created_ts"]}, "created_at": 1708553244.9698653, "relation_name": "HARMONIZED_DEV.RECORDTRAK.data_refresh_timestamp", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='description',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['description', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith refresh_times as (\r\n    select\r\n        '1900-01-01'::timestamp_ntz(9) as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_dates') }}\r\n    union all\r\n    select\r\n        '1900-01-01'::timestamp_ntz(9) as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_business_units') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_clients') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_defendants') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_firms') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_hold_requests') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_invoices') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_litigation_cases') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_masters') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_offices') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_payments') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_qc_jobs_queues') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_requests') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_stc_queues') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_tag_items') }}\r\n    union all\r\n    select\r\n        harmonized_created_ts as harmonized_refreshed,\r\n        updated_ts as model_refreshed\r\n    from {{ ref('dim_timesheets') }}\r\n),\r\n\r\nfinal as (\r\n    select\r\n        'HARMONIZED LAYER TABLES' as description,\r\n        max(harmonized_refreshed) as last_refresh,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from refresh_times\r\n    union all\r\n    select\r\n        'DATA MODEL TABLES' as description,\r\n        max(model_refreshed) as last_refresh,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from refresh_times\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "dim_dates", "package": null, "version": null}, {"name": "dim_business_units", "package": null, "version": null}, {"name": "dim_clients", "package": null, "version": null}, {"name": "dim_defendants", "package": null, "version": null}, {"name": "dim_firms", "package": null, "version": null}, {"name": "dim_hold_requests", "package": null, "version": null}, {"name": "dim_invoices", "package": null, "version": null}, {"name": "dim_litigation_cases", "package": null, "version": null}, {"name": "dim_masters", "package": null, "version": null}, {"name": "dim_offices", "package": null, "version": null}, {"name": "dim_payments", "package": null, "version": null}, {"name": "dim_qc_jobs_queues", "package": null, "version": null}, {"name": "dim_requests", "package": null, "version": null}, {"name": "dim_stc_queues", "package": null, "version": null}, {"name": "dim_tag_items", "package": null, "version": null}, {"name": "dim_timesheets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.recordtrak.dim_dates", "model.recordtrak.dim_business_units", "model.recordtrak.dim_clients", "model.recordtrak.dim_defendants", "model.recordtrak.dim_firms", "model.recordtrak.dim_hold_requests", "model.recordtrak.dim_invoices", "model.recordtrak.dim_litigation_cases", "model.recordtrak.dim_masters", "model.recordtrak.dim_offices", "model.recordtrak.dim_payments", "model.recordtrak.dim_qc_jobs_queues", "model.recordtrak.dim_requests", "model.recordtrak.dim_stc_queues", "model.recordtrak.dim_tag_items", "model.recordtrak.dim_timesheets"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\data_refresh_timestamp.sql", "compiled": true, "compiled_code": "\n\nwith refresh_times as (\n    select\n        '1900-01-01'::timestamp_ntz(9) as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_dates\n    union all\n    select\n        '1900-01-01'::timestamp_ntz(9) as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_business_units\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_clients\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_defendants\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_firms\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_hold_requests\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_invoices\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_masters\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_offices\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_payments\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_requests\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_stc_queues\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_tag_items\n    union all\n    select\n        harmonized_created_ts as harmonized_refreshed,\n        updated_ts as model_refreshed\n    from HARMONIZED_DEV.RECORDTRAK.dim_timesheets\n),\n\nfinal as (\n    select\n        'HARMONIZED LAYER TABLES' as description,\n        max(harmonized_refreshed) as last_refresh,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from refresh_times\n    union all\n    select\n        'DATA MODEL TABLES' as description,\n        max(model_refreshed) as last_refresh,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from refresh_times\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_business_units": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_business_units", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_business_units.sql", "original_file_path": "models\\final\\dim_business_units.sql", "unique_id": "model.recordtrak.dim_business_units", "fqn": ["recordtrak", "final", "dim_business_units"], "alias": "dim_business_units", "checksum": {"name": "sha256", "checksum": "edc294b0308bc0edc3928c0b55f2076090e1af4d3f1fe20037ef366d8b09365b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "business_unit_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "merge_update_columns": ["business_unit"], "incremental_stretegy": "merge"}, "tags": [], "description": "Dimension table for business units", "columns": {"business_unit_key": {"name": "business_unit_key", "description": "Primary key for the business units dimension", "meta": {}, "data_type": "number(19, 0)", "constraints": [], "quote": null, "tags": [], "required": true}, "business_unit": {"name": "business_unit", "description": "Name of the business unit", "meta": {}, "data_type": "varchar(250)", "constraints": [], "quote": null, "tags": [], "required": true}, "created_ts": {"name": "created_ts", "description": "Timestamp when the business unit was created", "meta": {}, "data_type": "timestamp_tz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the business unit was last updated", "meta": {}, "data_type": "timestamp_tz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "business_unit_key", "incremental_stretegy": "merge", "merge_update_columns": ["business_unit"]}, "created_at": 1708553245.4321914, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_business_units", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='business_unit_key',\r\n        incremental_stretegy='merge',\r\n        merge_update_columns=['business_unit']\r\n    )\r\n}}\r\n\r\nwith rawbusinessunits as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblbill') }}\r\n    where coalesce(trim(businessunit), '') != ''\r\n),\r\n\r\nfinal as (\r\n    select\r\n        abs(hash(upper(trim(businessunit))))::number as business_unit_key,\r\n        upper(trim(businessunit))::varchar(250) as business_unit,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawbusinessunits\r\n    union\r\n    select\r\n        -1::number as business_unit_key,\r\n        'UNKNOWN' as business_unit,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% if is_incremental() %}\r\n    where not exists (select 1 from {{ this }} where {{ this }}.business_unit = final.business_unit)\r\n{% endif %}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblbill"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblbill"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_business_units.sql", "compiled": true, "compiled_code": "\n\nwith rawbusinessunits as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblbill\n    where coalesce(trim(businessunit), '') != ''\n),\n\nfinal as (\n    select\n        abs(hash(upper(trim(businessunit))))::number as business_unit_key,\n        upper(trim(businessunit))::varchar(250) as business_unit,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawbusinessunits\n    union\n    select\n        -1::number as business_unit_key,\n        'UNKNOWN' as business_unit,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n\n)\n\nselect * from final\n\n\n    where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_business_units where HARMONIZED_DEV.RECORDTRAK.dim_business_units.business_unit = final.business_unit)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_clients": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_clients", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_clients.sql", "original_file_path": "models\\final\\dim_clients.sql", "unique_id": "model.recordtrak.dim_clients", "fqn": ["recordtrak", "final", "dim_clients"], "alias": "dim_clients", "checksum": {"name": "sha256", "checksum": "d952f101f66087f63241984c31afffdd9036986cd1d9720eb4fc3e06460015f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id_tblclient", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["client_key", "id_tblclient", "created_ts"]}, "tags": [], "description": "Dimension table for clients", "columns": {"client_key": {"name": "client_key", "description": "Primary key for the client dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblclient": {"name": "id_tblclient", "description": "ID for the client in the TBLCLIENT table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "client_first_name": {"name": "client_first_name", "description": "First name of the client", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "client_title": {"name": "client_title", "description": "Title of the client", "meta": {}, "data_type": "varchar(6)", "constraints": [], "quote": null, "tags": []}, "bar_number": {"name": "bar_number", "description": "Bar number associated with the client", "meta": {}, "data_type": "varchar(15)", "constraints": [], "quote": null, "tags": []}, "sales_person": {"name": "sales_person", "description": "Salesperson associated with the client", "meta": {}, "data_type": "varchar(25)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the client is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "client_last_name": {"name": "client_last_name", "description": "Last name of the client", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "client_type": {"name": "client_type", "description": "Type of the client", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Status of the client's account", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "client_middle_initial": {"name": "client_middle_initial", "description": "Middle initial of the client", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "Source code associated with the client", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the client record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the client record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "id_tblclient", "incremental_stretegy": "merge", "merge_exclude_columns": ["client_key", "id_tblclient", "created_ts"]}, "created_at": 1708553245.44219, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_clients", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='id_tblclient',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['client_key', 'id_tblclient', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawclients as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblclient') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        abs(hash(id_tblclient))::number as client_key,\r\n        trim(id_tblclient)::varchar(256) as id_tblclient,\r\n        trim(newfirst)::varchar(50) as client_first_name,\r\n        trim(title)::varchar(6) as client_title,\r\n        trim(barnumber)::varchar(15) as bar_number,\r\n        trim(salespers)::varchar(25) as sales_person,\r\n        active::boolean as is_active,\r\n        trim(newlast)::varchar(50) as client_last_name,\r\n        trim(type)::varchar(1) as client_type,\r\n        trim(acctstatus)::varchar(10) as account_status,\r\n        trim(newinit)::varchar(1) as client_middle_initial,\r\n        trim(source)::varchar(2) as source_code,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawclients\r\n    union\r\n    select\r\n        -1 as client_key,\r\n        'UNKNOWN' as id_tblclient,\r\n        'UNKNOWN' as client_first_name,\r\n        'UNKNOWN' as client_title,\r\n        'UNKNOWN' as bar_number,\r\n        'UNKNOWN' as sales_person,\r\n        1 as is_active,\r\n        'UNKNOWN' as client_last_name,\r\n        '' as client_type,\r\n        'UNKNOWN' as account_status,\r\n        '' as client_middle_initial,\r\n        '' as source_code,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where client_key = -1)\r\n    {% endif %}\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblclient"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblclient"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_clients.sql", "compiled": true, "compiled_code": "\n\nwith rawclients as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblclient\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_clients)\n    \n\n),\n\nfinal as (\n    select\n        abs(hash(id_tblclient))::number as client_key,\n        trim(id_tblclient)::varchar(256) as id_tblclient,\n        trim(newfirst)::varchar(50) as client_first_name,\n        trim(title)::varchar(6) as client_title,\n        trim(barnumber)::varchar(15) as bar_number,\n        trim(salespers)::varchar(25) as sales_person,\n        active::boolean as is_active,\n        trim(newlast)::varchar(50) as client_last_name,\n        trim(type)::varchar(1) as client_type,\n        trim(acctstatus)::varchar(10) as account_status,\n        trim(newinit)::varchar(1) as client_middle_initial,\n        trim(source)::varchar(2) as source_code,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawclients\n    union\n    select\n        -1 as client_key,\n        'UNKNOWN' as id_tblclient,\n        'UNKNOWN' as client_first_name,\n        'UNKNOWN' as client_title,\n        'UNKNOWN' as bar_number,\n        'UNKNOWN' as sales_person,\n        1 as is_active,\n        'UNKNOWN' as client_last_name,\n        '' as client_type,\n        'UNKNOWN' as account_status,\n        '' as client_middle_initial,\n        '' as source_code,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_clients where client_key = -1)\n    \n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_dates": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_dates", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_dates.sql", "original_file_path": "models\\final\\dim_dates.sql", "unique_id": "model.recordtrak.dim_dates", "fqn": ["recordtrak", "final", "dim_dates"], "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "a0a6f5b34d0aaaed0b3cecfe0cdda0802ce5cfef704f7c4dc04073e1f6a82c7f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "date_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["date_key", "created_ts"]}, "tags": [], "description": "Dimension table for date-related information", "columns": {"date_key": {"name": "date_key", "description": "Primary key for the date dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "full_date": {"name": "full_date", "description": "Full date information", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "Year of the date", "meta": {}, "data_type": "number(4, 0)", "constraints": [], "quote": null, "tags": []}, "half": {"name": "half", "description": "Half of the year (1 or 2)", "meta": {}, "data_type": "number(1, 0)", "constraints": [], "quote": null, "tags": []}, "year_half": {"name": "year_half", "description": "Year and half combination (e.g., '2022 H1')", "meta": {}, "data_type": "varchar(7)", "constraints": [], "quote": null, "tags": []}, "quarter": {"name": "quarter", "description": "Quarter of the year (1 to 4)", "meta": {}, "data_type": "number(2, 0)", "constraints": [], "quote": null, "tags": []}, "year_quarter": {"name": "year_quarter", "description": "Year and quarter combination (e.g., '2022 Q1')", "meta": {}, "data_type": "varchar(7)", "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month of the year (1 to 12)", "meta": {}, "data_type": "number(2, 0)", "constraints": [], "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Full name of the month", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "month_name_abbrev": {"name": "month_name_abbrev", "description": "Abbreviated name of the month", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Year and month combination (e.g., '2022-01')", "meta": {}, "data_type": "varchar(8)", "constraints": [], "quote": null, "tags": []}, "day_of_month": {"name": "day_of_month", "description": "Day of the month (1 to 31)", "meta": {}, "data_type": "number(2, 0)", "constraints": [], "quote": null, "tags": []}, "day_name": {"name": "day_name", "description": "Full name of the day", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "day_name_abbrev": {"name": "day_name_abbrev", "description": "Abbreviated name of the day", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "is_weekend": {"name": "is_weekend", "description": "Flag indicating whether the date is a weekend", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp for record creation", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp for record update", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "date_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["date_key", "created_ts"]}, "created_at": 1708553245.454232, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_dates", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='date_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['date_key', 'created_ts']\r\n    )\r\n}}\r\n\r\n\r\nwith recursive calendar_dates as (\r\n    select DATEFROMPARTS(1970, 1, 1) as full_date\r\n    union all\r\n    select DATEADD(day, 1, full_date)\r\n    from calendar_dates\r\n    where full_date < DATEADD(year, 5, DATEFROMPARTS(YEAR(CURRENT_DATE), 1, 1)) - 1\r\n),\r\n\r\ncalendar_dates_with_unknown as (\r\n    select * from calendar_dates\r\n    union\r\n    select DATEFROMPARTS(1900, 1, 1) as full_date\r\n),\r\n\r\nholiday_dates as (\r\n    select\r\n        case MONTH(full_date)\r\n            when 1\r\n                then                 --New Year's Day\r\n                    case DAYOFWEEKISO(full_date)\r\n                        when 6 then DATEADD(day, -1, full_date)\r\n                        when 7 then DATEADD(day, 1, full_date)\r\n                        else full_date\r\n                    end\r\n            when 5\r\n                then                 -- Memorial Day\r\n                    IFF(DAYOFWEEKISO(LAST_DAY(full_date, month)) = 1, LAST_DAY(full_date, month), PREVIOUS_DAY(LAST_DAY(full_date, month), 'mo'))\r\n            when 7\r\n                then                 -- Independence Day\r\n                    case DAYOFWEEKISO(DATEADD(day, 3, full_date))\r\n                        when 6 then DATEADD(day, 2, full_date)\r\n                        when 7 then DATEADD(day, 4, full_date)\r\n                        else DATEADD(day, 3, full_date)\r\n                    end\r\n            when 9\r\n                then                 -- Labor Day\r\n                    IFF(DAYOFWEEKISO(full_date) = 1, full_date, NEXT_DAY(full_date, 'mo'))\r\n            when 11\r\n                then                -- Thanksgiving Day\r\n                    IFF(DAYOFWEEKISO(full_date) = 4, NEXT_DAY(full_date, 'th') + interval '2 weeks', NEXT_DAY(full_date, 'th') + interval '3 weeks')\r\n            when 12 then                -- Christmas Day\r\n                case DAYOFWEEKISO(DATEADD(day, 24, full_date))\r\n                    when 6 then DATEADD(day, 23, full_date)\r\n                    when 7 then DATEADD(day, 25, full_date)\r\n                    else DATEADD(day, 24, full_date)\r\n                end\r\n        end as holiday_date,\r\n\r\n        case MONTH(holiday_date)\r\n            when 1 then 'New Year''s Day'\r\n            when 5 then 'Memorial Day'\r\n            when 7 then 'Independence Day'\r\n            when 9 then 'Labor Day'\r\n            when 11 then 'Thanksgiving Day'\r\n            when 12 then IFF(DAY(holiday_date) = 31, 'New Year''s Day', 'Christmas Day')\r\n        end as holiday_description,\r\n\r\n        true as is_holiday\r\n    from calendar_dates\r\n    where DAY(full_date) = 1 and MONTH(full_date) in (1, 5, 7, 9, 11, 12)\r\n    union\r\n    select\r\n        IFF(DAYOFWEEKISO(full_date) = 4, NEXT_DAY(full_date, 'th') + interval '2 weeks, 1 days', NEXT_DAY(full_date, 'th') + interval '3 weeks, 1 days')\r\n            as holiday_date,\r\n        'Day After Thanksgiving' as holiday_description,\r\n        true as is_holiday\r\n    from calendar_dates\r\n    where DAY(full_date) = 1 and MONTH(full_date) = 11\r\n),\r\n\r\nfinal as (\r\n    select\r\n        TO_VARCHAR(cdu.full_date, 'YYYYMMDD')::INTEGER as date_key,\r\n        cdu.full_date as full_date,\r\n        YEAR(full_date) as year,\r\n        DAYOFYEAR(full_date) as day_of_year,\r\n        case when QUARTER(full_date) < 3 then 1 else 2 end as half,\r\n        (TO_VARCHAR(full_date, 'YYYY-H') || case when QUARTER(full_date) < 3 then 1 else 2 end::VARCHAR)::VARCHAR(7) as year_half,\r\n        case\r\n            when half = 1 then DATEDIFF(day, DATE_TRUNC(year, full_date), full_date) + 1\r\n            else DATEDIFF(day, DATEADD(month, 6, DATE_TRUNC(year, full_date)), full_date) + 1\r\n        end as day_of_half,\r\n        QUARTER(full_date) as quarter,\r\n        (TO_VARCHAR(full_date, 'YYYY-Q') || QUARTER(full_date)::VARCHAR)::VARCHAR(7) as year_quarter,\r\n        DATEDIFF(day, DATE_TRUNC('QUARTER', full_date), full_date) + 1 as day_of_quarter,\r\n        MONTH(full_date) as month,\r\n        TO_VARCHAR(full_date, 'MMMM')::VARCHAR(10) as month_name,\r\n        MONTHNAME(full_date) as month_name_abbrev,\r\n        TO_VARCHAR(full_date, 'YYYY-Mon')::VARCHAR(8) as year_month,\r\n        DAY(full_date) as day_of_month,\r\n        DECODE(DAYOFWEEKISO(full_date), 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 'Sunday', '')::VARCHAR(10) as day_name,\r\n        DAYNAME(full_date) as day_name_abbrev,\r\n        DAYOFWEEKISO(full_date) in (6, 7) as is_weekend, -- 6: Saturday, 7: Sunday\r\n        is_weekend or COALESCE(hd.is_holiday, false) as is_holiday,\r\n        hd.holiday_description::VARCHAR(50) as holiday_description,\r\n        CURRENT_TIMESTAMP::TIMESTAMP_NTZ(9) as created_ts,\r\n        CURRENT_TIMESTAMP::TIMESTAMP_NTZ(9) as updated_ts\r\n    from calendar_dates_with_unknown as cdu\r\n    left join holiday_dates as hd\r\n        on cdu.full_date = hd.holiday_date\r\n)\r\n\r\nselect * from final\r\n{% if is_incremental() %}\r\n    where not exists (select 1 from {{ this }} where {{ this }}.date_key = final.date_key)\r\n{% endif %}\r\n\r\norder by 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_dates.sql", "compiled": true, "compiled_code": "\n\n\nwith recursive calendar_dates as (\n    select DATEFROMPARTS(1970, 1, 1) as full_date\n    union all\n    select DATEADD(day, 1, full_date)\n    from calendar_dates\n    where full_date < DATEADD(year, 5, DATEFROMPARTS(YEAR(CURRENT_DATE), 1, 1)) - 1\n),\n\ncalendar_dates_with_unknown as (\n    select * from calendar_dates\n    union\n    select DATEFROMPARTS(1900, 1, 1) as full_date\n),\n\nholiday_dates as (\n    select\n        case MONTH(full_date)\n            when 1\n                then                 --New Year's Day\n                    case DAYOFWEEKISO(full_date)\n                        when 6 then DATEADD(day, -1, full_date)\n                        when 7 then DATEADD(day, 1, full_date)\n                        else full_date\n                    end\n            when 5\n                then                 -- Memorial Day\n                    IFF(DAYOFWEEKISO(LAST_DAY(full_date, month)) = 1, LAST_DAY(full_date, month), PREVIOUS_DAY(LAST_DAY(full_date, month), 'mo'))\n            when 7\n                then                 -- Independence Day\n                    case DAYOFWEEKISO(DATEADD(day, 3, full_date))\n                        when 6 then DATEADD(day, 2, full_date)\n                        when 7 then DATEADD(day, 4, full_date)\n                        else DATEADD(day, 3, full_date)\n                    end\n            when 9\n                then                 -- Labor Day\n                    IFF(DAYOFWEEKISO(full_date) = 1, full_date, NEXT_DAY(full_date, 'mo'))\n            when 11\n                then                -- Thanksgiving Day\n                    IFF(DAYOFWEEKISO(full_date) = 4, NEXT_DAY(full_date, 'th') + interval '2 weeks', NEXT_DAY(full_date, 'th') + interval '3 weeks')\n            when 12 then                -- Christmas Day\n                case DAYOFWEEKISO(DATEADD(day, 24, full_date))\n                    when 6 then DATEADD(day, 23, full_date)\n                    when 7 then DATEADD(day, 25, full_date)\n                    else DATEADD(day, 24, full_date)\n                end\n        end as holiday_date,\n\n        case MONTH(holiday_date)\n            when 1 then 'New Year''s Day'\n            when 5 then 'Memorial Day'\n            when 7 then 'Independence Day'\n            when 9 then 'Labor Day'\n            when 11 then 'Thanksgiving Day'\n            when 12 then IFF(DAY(holiday_date) = 31, 'New Year''s Day', 'Christmas Day')\n        end as holiday_description,\n\n        true as is_holiday\n    from calendar_dates\n    where DAY(full_date) = 1 and MONTH(full_date) in (1, 5, 7, 9, 11, 12)\n    union\n    select\n        IFF(DAYOFWEEKISO(full_date) = 4, NEXT_DAY(full_date, 'th') + interval '2 weeks, 1 days', NEXT_DAY(full_date, 'th') + interval '3 weeks, 1 days')\n            as holiday_date,\n        'Day After Thanksgiving' as holiday_description,\n        true as is_holiday\n    from calendar_dates\n    where DAY(full_date) = 1 and MONTH(full_date) = 11\n),\n\nfinal as (\n    select\n        TO_VARCHAR(cdu.full_date, 'YYYYMMDD')::INTEGER as date_key,\n        cdu.full_date as full_date,\n        YEAR(full_date) as year,\n        DAYOFYEAR(full_date) as day_of_year,\n        case when QUARTER(full_date) < 3 then 1 else 2 end as half,\n        (TO_VARCHAR(full_date, 'YYYY-H') || case when QUARTER(full_date) < 3 then 1 else 2 end::VARCHAR)::VARCHAR(7) as year_half,\n        case\n            when half = 1 then DATEDIFF(day, DATE_TRUNC(year, full_date), full_date) + 1\n            else DATEDIFF(day, DATEADD(month, 6, DATE_TRUNC(year, full_date)), full_date) + 1\n        end as day_of_half,\n        QUARTER(full_date) as quarter,\n        (TO_VARCHAR(full_date, 'YYYY-Q') || QUARTER(full_date)::VARCHAR)::VARCHAR(7) as year_quarter,\n        DATEDIFF(day, DATE_TRUNC('QUARTER', full_date), full_date) + 1 as day_of_quarter,\n        MONTH(full_date) as month,\n        TO_VARCHAR(full_date, 'MMMM')::VARCHAR(10) as month_name,\n        MONTHNAME(full_date) as month_name_abbrev,\n        TO_VARCHAR(full_date, 'YYYY-Mon')::VARCHAR(8) as year_month,\n        DAY(full_date) as day_of_month,\n        DECODE(DAYOFWEEKISO(full_date), 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 'Sunday', '')::VARCHAR(10) as day_name,\n        DAYNAME(full_date) as day_name_abbrev,\n        DAYOFWEEKISO(full_date) in (6, 7) as is_weekend, -- 6: Saturday, 7: Sunday\n        is_weekend or COALESCE(hd.is_holiday, false) as is_holiday,\n        hd.holiday_description::VARCHAR(50) as holiday_description,\n        CURRENT_TIMESTAMP::TIMESTAMP_NTZ(9) as created_ts,\n        CURRENT_TIMESTAMP::TIMESTAMP_NTZ(9) as updated_ts\n    from calendar_dates_with_unknown as cdu\n    left join holiday_dates as hd\n        on cdu.full_date = hd.holiday_date\n)\n\nselect * from final\n\n    where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_dates where HARMONIZED_DEV.RECORDTRAK.dim_dates.date_key = final.date_key)\n\n\norder by 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_defendants": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_defendants", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_defendants.sql", "original_file_path": "models\\final\\dim_defendants.sql", "unique_id": "model.recordtrak.dim_defendants", "fqn": ["recordtrak", "final", "dim_defendants"], "alias": "dim_defendants", "checksum": {"name": "sha256", "checksum": "54e6534c1b97dce6478225e976a4343535bb01a4a434b976ed7a2af8263d21ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id_tbldefendant", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["defendant_key", "id_tbldefendant", "created_ts"]}, "tags": [], "description": "Dimension table for defendants", "columns": {"defendant_key": {"name": "defendant_key", "description": "Primary key for the defendant dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tbldefendant": {"name": "id_tbldefendant", "description": "ID for the defendant in the TBLDEFENDANT table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "bb_firm_code": {"name": "bb_firm_code", "description": "BB Firm Code associated with the defendant", "meta": {}, "data_type": "varchar(4)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the defendant is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "courier_code": {"name": "courier_code", "description": "Courier code associated with the defendant", "meta": {}, "data_type": "varchar(4)", "constraints": [], "quote": null, "tags": []}, "bb_combo": {"name": "bb_combo", "description": "BB Combo associated with the defendant", "meta": {}, "data_type": "varchar(9)", "constraints": [], "quote": null, "tags": []}, "invoiced_name": {"name": "invoiced_name", "description": "Invoiced name of the defendant", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "Source code associated with the defendant", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "bill_status": {"name": "bill_status", "description": "Bill status of the defendant", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "magna_attorney_code": {"name": "magna_attorney_code", "description": "Magna Attorney Code associated with the defendant", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "defendant_code": {"name": "defendant_code", "description": "Defendant code", "meta": {}, "data_type": "varchar(6)", "constraints": [], "quote": null, "tags": []}, "printable_firm": {"name": "printable_firm", "description": "Printable firm associated with the defendant", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "defendant_name": {"name": "defendant_name", "description": "Name of the defendant", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "attorney_code": {"name": "attorney_code", "description": "Attorney code associated with the defendant", "meta": {}, "data_type": "varchar(8)", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the defendant was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the defendant was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "id_tbldefendant", "incremental_stretegy": "merge", "merge_exclude_columns": ["defendant_key", "id_tbldefendant", "created_ts"]}, "created_at": 1708553245.4602373, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_defendants", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='id_tbldefendant',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['defendant_key', 'id_tbldefendant', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawdefendants as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tbldefendant') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        abs(hash(id_tbldefendant))::number as defendant_key,\r\n        trim(id_tbldefendant)::varchar(256) as id_tbldefendant,\r\n        trim(bbfirmcode)::varchar(4) as bb_firm_code,\r\n        active::boolean as is_active,\r\n        trim(courier)::varchar(4) as courier_code,\r\n        trim(bb_combo)::varchar(9) as bb_combo,\r\n        trim(name_inv)::varchar(256) as invoiced_name,\r\n        trim(source)::varchar(2) as source_code,\r\n        trim(billstatus)::varchar(1) as bill_status,\r\n        trim(magnaatcode)::number as magna_attorney_code,\r\n        trim(defcode)::varchar(6) as defendant_code,\r\n        trim(printable_firm)::varchar(50) as printable_firm,\r\n        trim(defname)::varchar(50) as defendant_name,\r\n        trim(at_code)::varchar(8) as attorney_code,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawdefendants\r\n    union\r\n    select\r\n        -1 as defendant_key,\r\n        'UNKNOWN' as id_tbldefendant,\r\n        'UNK' as bb_firm_code,\r\n        1::boolean as is_active,\r\n        'UNK' as courier_code,\r\n        'UNKNOWN' as bb_combo,\r\n        'UNKNOWN' as invoiced_name,\r\n        '' as source_code,\r\n        '' as bill_status,\r\n        null::number as magna_attorney_code,\r\n        'UNKNOWN' as defendant_code,\r\n        'UNKNOWN' as printable_firm,\r\n        'UNKNOWN' as defendant_name,\r\n        'UNKNOWN' as attorney_code,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where defendant_key = -1)\r\n    {% endif %}\r\n\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbldefendant"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbldefendant"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_defendants.sql", "compiled": true, "compiled_code": "\n\nwith rawdefendants as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbldefendant\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_defendants)\n    \n\n),\n\nfinal as (\n    select\n        abs(hash(id_tbldefendant))::number as defendant_key,\n        trim(id_tbldefendant)::varchar(256) as id_tbldefendant,\n        trim(bbfirmcode)::varchar(4) as bb_firm_code,\n        active::boolean as is_active,\n        trim(courier)::varchar(4) as courier_code,\n        trim(bb_combo)::varchar(9) as bb_combo,\n        trim(name_inv)::varchar(256) as invoiced_name,\n        trim(source)::varchar(2) as source_code,\n        trim(billstatus)::varchar(1) as bill_status,\n        trim(magnaatcode)::number as magna_attorney_code,\n        trim(defcode)::varchar(6) as defendant_code,\n        trim(printable_firm)::varchar(50) as printable_firm,\n        trim(defname)::varchar(50) as defendant_name,\n        trim(at_code)::varchar(8) as attorney_code,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawdefendants\n    union\n    select\n        -1 as defendant_key,\n        'UNKNOWN' as id_tbldefendant,\n        'UNK' as bb_firm_code,\n        1::boolean as is_active,\n        'UNK' as courier_code,\n        'UNKNOWN' as bb_combo,\n        'UNKNOWN' as invoiced_name,\n        '' as source_code,\n        '' as bill_status,\n        null::number as magna_attorney_code,\n        'UNKNOWN' as defendant_code,\n        'UNKNOWN' as printable_firm,\n        'UNKNOWN' as defendant_name,\n        'UNKNOWN' as attorney_code,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_defendants where defendant_key = -1)\n    \n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_firms": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_firms", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_firms.sql", "original_file_path": "models\\final\\dim_firms.sql", "unique_id": "model.recordtrak.dim_firms", "fqn": ["recordtrak", "final", "dim_firms"], "alias": "dim_firms", "checksum": {"name": "sha256", "checksum": "00313d81543b2702e0174964ce9ccdcafe998a0e3ce7af5deed93485078f4549"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "firm_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["firm_key", "created_ts"]}, "tags": [], "description": "Dimension table for firms", "columns": {"firm_key": {"name": "firm_key", "description": "Primary key for the firm dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblfirm": {"name": "id_tblfirm", "description": "ID for the firm in the TBLFIRM table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "firm_identity": {"name": "firm_identity", "description": "Identity number associated with the firm", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "firm_name": {"name": "firm_name", "description": "Name of the firm", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "firm_full_name": {"name": "firm_full_name", "description": "Full name of the firm", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "firm_code": {"name": "firm_code", "description": "Code associated with the firm", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the firm is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the firm record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the firm record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "firm_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["firm_key", "created_ts"]}, "created_at": 1708553245.4622273, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_firms", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='firm_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['firm_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawfirms as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblfirm') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        abs(hash(id_tblfirm))::number as firm_key,\r\n        trim(id_tblfirm)::varchar(256) as id_tblfirm,\r\n        firm_ident::number as firm_identity,\r\n        trim(firm_name)::varchar(256) as firm_name,\r\n        trim(fullname)::varchar(256) as firm_full_name,\r\n        trim(firm_code)::varchar(10) as firm_code,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawfirms\r\n    union\r\n    select\r\n        -1 as firm_key,\r\n        'UNKNOWN' as id_tblfirm,\r\n        -1 as firm_identity,\r\n        'UNKNOWN' as firm_name,\r\n        'UNKNOWN' as firm_full_name,\r\n        'UNKNOWN' as firm_code,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where firm_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblfirm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblfirm"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_firms.sql", "compiled": true, "compiled_code": "\n\nwith rawfirms as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblfirm\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_firms)\n    \n\n),\n\nfinal as (\n    select\n        abs(hash(id_tblfirm))::number as firm_key,\n        trim(id_tblfirm)::varchar(256) as id_tblfirm,\n        firm_ident::number as firm_identity,\n        trim(firm_name)::varchar(256) as firm_name,\n        trim(fullname)::varchar(256) as firm_full_name,\n        trim(firm_code)::varchar(10) as firm_code,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawfirms\n    union\n    select\n        -1 as firm_key,\n        'UNKNOWN' as id_tblfirm,\n        -1 as firm_identity,\n        'UNKNOWN' as firm_name,\n        'UNKNOWN' as firm_full_name,\n        'UNKNOWN' as firm_code,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_firms where firm_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_hold_requests": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_hold_requests", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_hold_requests.sql", "original_file_path": "models\\final\\dim_hold_requests.sql", "unique_id": "model.recordtrak.dim_hold_requests", "fqn": ["recordtrak", "final", "dim_hold_requests"], "alias": "dim_hold_requests", "checksum": {"name": "sha256", "checksum": "2b82f22026c53723e3015ff42d5ca2a6c42376480dd2c5764acc40b03ea57732"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hold_request_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["hold_request_key", "created_ts"]}, "tags": [], "description": "Dimension table for hold requests", "columns": {"hold_request_key": {"name": "hold_request_key", "description": "Primary key for the hold request dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblholdreq": {"name": "id_tblholdreq", "description": "ID for the hold request in the TBLHOLDREQ table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "client_code": {"name": "client_code", "description": "Code associated with the client", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "tag_number": {"name": "tag_number", "description": "Tag associated with the hold request", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "objection_date": {"name": "objection_date", "description": "Timestamp indicating the objection date", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the hold request is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the hold request record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the hold request record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "hold_request_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["hold_request_key", "created_ts"]}, "created_at": 1708553245.4652412, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_hold_requests", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='hold_request_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['hold_request_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawholdrequests as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblholdreq') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as hold_request_key,\r\n        trim(id_tblholdreq)::varchar(256) as id_tblholdreq,\r\n        trim(cl_code)::varchar(10) as client_code,\r\n        tag::number as tag_number,\r\n        objct_date::timestamp_ntz(9) as objection_date,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawholdrequests\r\n    union\r\n    select\r\n        -1 as hold_request_key,\r\n        'UNKNOWN' as id_tblholdreq,\r\n        'UNKNOWN' as client_code,\r\n        -1 as tag_number,\r\n        '1900-01-01' as objection_date,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where hold_request_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblholdreq"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblholdreq"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_hold_requests.sql", "compiled": true, "compiled_code": "\n\nwith rawholdrequests as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblholdreq\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_hold_requests)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as hold_request_key,\n        trim(id_tblholdreq)::varchar(256) as id_tblholdreq,\n        trim(cl_code)::varchar(10) as client_code,\n        tag::number as tag_number,\n        objct_date::timestamp_ntz(9) as objection_date,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawholdrequests\n    union\n    select\n        -1 as hold_request_key,\n        'UNKNOWN' as id_tblholdreq,\n        'UNKNOWN' as client_code,\n        -1 as tag_number,\n        '1900-01-01' as objection_date,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_hold_requests where hold_request_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_invoices": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_invoices", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_invoices.sql", "original_file_path": "models\\final\\dim_invoices.sql", "unique_id": "model.recordtrak.dim_invoices", "fqn": ["recordtrak", "final", "dim_invoices"], "alias": "dim_invoices", "checksum": {"name": "sha256", "checksum": "c6e58b294fc079d6101a151770373d5843cdc0573ac8aeb1463da50db76135d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "invoice_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["invoice_key", "created_ts"]}, "tags": [], "description": "Dimension table for invoices", "columns": {"invoice_key": {"name": "invoice_key", "description": "Primary key for the invoices dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": [], "required": true}, "invoice_number": {"name": "invoice_number", "description": "Invoice number", "meta": {}, "data_type": "number(19, 0)", "constraints": [], "quote": null, "tags": []}, "sales_person": {"name": "sales_person", "description": "Sales person associated with the invoice", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "plaintiff_caption": {"name": "plaintiff_caption", "description": "Plaintiff Caption value", "meta": {}, "data_type": "varchar(200)", "constraints": [], "quote": null, "tags": []}, "attorney_code": {"name": "attorney_code", "description": "Attorney Code value", "meta": {}, "data_type": "varchar(16)", "constraints": [], "quote": null, "tags": []}, "claim_number": {"name": "claim_number", "description": "Claim number", "meta": {}, "data_type": "varchar(120)", "constraints": [], "quote": null, "tags": []}, "plan": {"name": "plan", "description": "Plan", "meta": {}, "data_type": "varchar(4)", "constraints": [], "quote": null, "tags": []}, "plan_type": {"name": "plan_type", "description": "Plan type", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "defendant_caption": {"name": "defendant_caption", "description": "Defendant Caption value", "meta": {}, "data_type": "varchar(200)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Active status", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "litigation": {"name": "litigation", "description": "Litigation status", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "account_manager": {"name": "account_manager", "description": "Account manager", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "court": {"name": "court", "description": "Court associated with the invoice", "meta": {}, "data_type": "varchar(28)", "constraints": [], "quote": null, "tags": []}, "file_number": {"name": "file_number", "description": "File number", "meta": {}, "data_type": "varchar(32)", "constraints": [], "quote": null, "tags": []}, "adjuster_name": {"name": "adjuster_name", "description": "Adjuster name", "meta": {}, "data_type": "varchar(32)", "constraints": [], "quote": null, "tags": []}, "area": {"name": "area", "description": "Area associated with the invoice", "meta": {}, "data_type": "varchar(30)", "constraints": [], "quote": null, "tags": []}, "insured_name": {"name": "insured_name", "description": "Insured name", "meta": {}, "data_type": "varchar(40)", "constraints": [], "quote": null, "tags": []}, "docket": {"name": "docket", "description": "Docket value", "meta": {}, "data_type": "varchar(75)", "constraints": [], "quote": null, "tags": []}, "invoice_type": {"name": "invoice_type", "description": "Invoice type", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "invoice_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["invoice_key", "created_ts"]}, "created_at": 1708553245.474262, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_invoices", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='invoice_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['invoice_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawinvoices as (\r\n    select * from {{ source('recordtrak', 'recordtrak_accounting_tblinvoices') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as invoice_key,\r\n        fldinvoicenumber::number(19, 0) as invoice_number,\r\n        trim(fldsalespers)::varchar(50) as sales_person,\r\n        trim(fldplcap)::varchar(200) as plaintiff_caption,\r\n        trim(fldatcode)::varchar(16) as attorney_code,\r\n        trim(fldclaimnum)::varchar(120) as claim_number,\r\n        trim(fldplan)::varchar(4) as plan,\r\n        trim(fldplantype)::varchar(2) as plan_type,\r\n        trim(flddefcap)::varchar(200) as defendant_caption,\r\n        active::boolean as is_active,\r\n        trim(fldlitigation)::varchar(10) as litigation,\r\n        trim(fldacctmgr)::varchar(50) as account_manager,\r\n        trim(fldcourt)::varchar(28) as court,\r\n        trim(fldfilenum)::varchar(32) as file_number,\r\n        trim(fldadjustername)::varchar(30) as adjuster_name,\r\n        trim(fldarea)::varchar(30) as area,\r\n        trim(fldinsured)::varchar(40) as insured_name,\r\n        trim(flddocket)::varchar(75) as docket,\r\n        trim(fldinvoicetype)::varchar(2) as invoice_type,\r\n        metadata_created_at as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n    from rawinvoices\r\n    union\r\n    select\r\n        -1 as invoice_key,\r\n        -1 as invoice_number,\r\n        'UNKNOWN' as sales_person,\r\n        'UNKNOWN' as plaintiff_caption,\r\n        'UNKNOWN' as attorney_code,\r\n        'UNKNOWN' as claim_number,\r\n        'UNKN' as plan,\r\n        '' as plan_type,\r\n        'UNKNOWN' as defendant_caption,\r\n        1::boolean as is_active,\r\n        'UNKNOWN' as litigation,\r\n        'UNKNOWN' as account_manager,\r\n        'UNKNOWN' as court,\r\n        'UNKNOWN' as file_number,\r\n        'UNKNOWN' as adjuster_name,\r\n        'UNKNOWN' as area,\r\n        'UNKNOWN' as insured_name,\r\n        'UNKNOWN' as docket,\r\n        '' as invoice_type,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where invoice_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_accounting_tblinvoices"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_invoices.sql", "compiled": true, "compiled_code": "\n\nwith rawinvoices as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblinvoices\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_invoices)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as invoice_key,\n        fldinvoicenumber::number(19, 0) as invoice_number,\n        trim(fldsalespers)::varchar(50) as sales_person,\n        trim(fldplcap)::varchar(200) as plaintiff_caption,\n        trim(fldatcode)::varchar(16) as attorney_code,\n        trim(fldclaimnum)::varchar(120) as claim_number,\n        trim(fldplan)::varchar(4) as plan,\n        trim(fldplantype)::varchar(2) as plan_type,\n        trim(flddefcap)::varchar(200) as defendant_caption,\n        active::boolean as is_active,\n        trim(fldlitigation)::varchar(10) as litigation,\n        trim(fldacctmgr)::varchar(50) as account_manager,\n        trim(fldcourt)::varchar(28) as court,\n        trim(fldfilenum)::varchar(32) as file_number,\n        trim(fldadjustername)::varchar(30) as adjuster_name,\n        trim(fldarea)::varchar(30) as area,\n        trim(fldinsured)::varchar(40) as insured_name,\n        trim(flddocket)::varchar(75) as docket,\n        trim(fldinvoicetype)::varchar(2) as invoice_type,\n        metadata_created_at as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n    from rawinvoices\n    union\n    select\n        -1 as invoice_key,\n        -1 as invoice_number,\n        'UNKNOWN' as sales_person,\n        'UNKNOWN' as plaintiff_caption,\n        'UNKNOWN' as attorney_code,\n        'UNKNOWN' as claim_number,\n        'UNKN' as plan,\n        '' as plan_type,\n        'UNKNOWN' as defendant_caption,\n        1::boolean as is_active,\n        'UNKNOWN' as litigation,\n        'UNKNOWN' as account_manager,\n        'UNKNOWN' as court,\n        'UNKNOWN' as file_number,\n        'UNKNOWN' as adjuster_name,\n        'UNKNOWN' as area,\n        'UNKNOWN' as insured_name,\n        'UNKNOWN' as docket,\n        '' as invoice_type,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_invoices where invoice_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_litigation_cases": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_litigation_cases", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_litigation_cases.sql", "original_file_path": "models\\final\\dim_litigation_cases.sql", "unique_id": "model.recordtrak.dim_litigation_cases", "fqn": ["recordtrak", "final", "dim_litigation_cases"], "alias": "dim_litigation_cases", "checksum": {"name": "sha256", "checksum": "3e6b1840de34b4ffc0ac9185701a7d6a114f80cd8077e3b6986743a92fd9f5f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "litigation_case_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["litigation_case_key", "created_ts"]}, "tags": [], "description": "Dimension table for litigation cases", "columns": {"litigation_case_key": {"name": "litigation_case_key", "description": "Primary key for the litigation case dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tbllitcase": {"name": "id_tbllitcase", "description": "ID for the litigation case in the TBLLITCASE table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "litigation_code": {"name": "litigation_code", "description": "Litigation code", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "area": {"name": "area", "description": "Area associated with the litigation case", "meta": {}, "data_type": "varchar(30)", "constraints": [], "quote": null, "tags": []}, "office_code": {"name": "office_code", "description": "Office code associated with the litigation case", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the litigation case is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_priority_account": {"name": "is_priority_account", "description": "Boolean flag indicating priority account", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the litigation case was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the litigation case was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "litigation_case_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["litigation_case_key", "created_ts"]}, "created_at": 1708553245.4762983, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='litigation_case_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['litigation_case_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawlitigationcases as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tbllitcase') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as litigation_case_key,\r\n        trim(id_tbllitcase)::varchar(256) as id_tbllitcase,\r\n        trim(litigation)::varchar(3) as litigation_code,\r\n        trim(area)::varchar(30) as area,\r\n        trim(office)::varchar(1) as office_code,\r\n        active::boolean as is_active,\r\n        priorityaccount::boolean as is_priority_account,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawlitigationcases\r\n    union\r\n    select\r\n        -1 as litigation_case_key,\r\n        'UNKNOWN' as id_tbllitcase,\r\n        'UNK' as litigation_code,\r\n        'UNKNOWN' as area,\r\n        '' as office_code,\r\n        1 as is_active,\r\n        0 as is_priority_account,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where litigation_case_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbllitcase"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbllitcase"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_litigation_cases.sql", "compiled": true, "compiled_code": "\n\nwith rawlitigationcases as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbllitcase\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as litigation_case_key,\n        trim(id_tbllitcase)::varchar(256) as id_tbllitcase,\n        trim(litigation)::varchar(3) as litigation_code,\n        trim(area)::varchar(30) as area,\n        trim(office)::varchar(1) as office_code,\n        active::boolean as is_active,\n        priorityaccount::boolean as is_priority_account,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawlitigationcases\n    union\n    select\n        -1 as litigation_case_key,\n        'UNKNOWN' as id_tbllitcase,\n        'UNK' as litigation_code,\n        'UNKNOWN' as area,\n        '' as office_code,\n        1 as is_active,\n        0 as is_priority_account,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases where litigation_case_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_masters": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_masters", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_masters.sql", "original_file_path": "models\\final\\dim_masters.sql", "unique_id": "model.recordtrak.dim_masters", "fqn": ["recordtrak", "final", "dim_masters"], "alias": "dim_masters", "checksum": {"name": "sha256", "checksum": "980198ee7c413a5d4ba2f38643f1b2385e75a079e10a4be2125f36f771f031cb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "master_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["master_key", "created_ts"]}, "tags": [], "description": "Dimension table for master records", "columns": {"master_key": {"name": "master_key", "description": "Primary key for the master dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblmaster": {"name": "id_tblmaster", "description": "ID for the master in the TBLMASTER table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "division": {"name": "division", "description": "Division associated with the master record", "meta": {}, "data_type": "varchar(15)", "constraints": [], "quote": null, "tags": []}, "plaintiff_caption": {"name": "plaintiff_caption", "description": "Caption for the plaintiff", "meta": {}, "data_type": "varchar(200)", "constraints": [], "quote": null, "tags": []}, "bb_no": {"name": "bb_no", "description": "BB number", "meta": {}, "data_type": "varchar(4)", "constraints": [], "quote": null, "tags": []}, "asb_case_no": {"name": "asb_case_no", "description": "ASB case number", "meta": {}, "data_type": "varchar(5)", "constraints": [], "quote": null, "tags": []}, "client_code": {"name": "client_code", "description": "Client code", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "Category associated with the master record", "meta": {}, "data_type": "varchar(21)", "constraints": [], "quote": null, "tags": []}, "rt_rep": {"name": "rt_rep", "description": "RT representative", "meta": {}, "data_type": "varchar(25)", "constraints": [], "quote": null, "tags": []}, "claim_no": {"name": "claim_no", "description": "Claim number", "meta": {}, "data_type": "varchar(60)", "constraints": [], "quote": null, "tags": []}, "plaintiff_attorney_code": {"name": "plaintiff_attorney_code", "description": "Plaintiff attorney code", "meta": {}, "data_type": "varchar(8)", "constraints": [], "quote": null, "tags": []}, "middle_name_initial": {"name": "middle_name_initial", "description": "Middle name initial", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comment associated with the master record", "meta": {}, "data_type": "varchar(200)", "constraints": [], "quote": null, "tags": []}, "maiden_name2": {"name": "maiden_name2", "description": "Maiden name 2", "meta": {}, "data_type": "varchar(30)", "constraints": [], "quote": null, "tags": []}, "defendant_caption": {"name": "defendant_caption", "description": "Caption for the defendant", "meta": {}, "data_type": "varchar(200)", "constraints": [], "quote": null, "tags": []}, "lrs_no": {"name": "lrs_no", "description": "LRS number", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "lrs_no_code": {"name": "lrs_no_code", "description": "LRS number code", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "bill_code": {"name": "bill_code", "description": "Bill code", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Last name", "meta": {}, "data_type": "varchar(15)", "constraints": [], "quote": null, "tags": []}, "witness_fee_amount": {"name": "witness_fee_amount", "description": "Witness fee amount", "meta": {}, "data_type": "number(19, 4)", "constraints": [], "quote": null, "tags": []}, "docket_number": {"name": "docket_number", "description": "Docket number", "meta": {}, "data_type": "varchar(75)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the master record is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "business_unit_code": {"name": "business_unit_code", "description": "Business unit code", "meta": {}, "data_type": "varchar(5)", "constraints": [], "quote": null, "tags": []}, "defendant_name": {"name": "defendant_name", "description": "Name of the defendant", "meta": {}, "data_type": "varchar(250)", "constraints": [], "quote": null, "tags": []}, "magna_case_no": {"name": "magna_case_no", "description": "MAGNA case number", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "area": {"name": "area", "description": "Area associated with the master record", "meta": {}, "data_type": "varchar(30)", "constraints": [], "quote": null, "tags": []}, "litigation_code": {"name": "litigation_code", "description": "Litigation code", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "requesting_attorney_code": {"name": "requesting_attorney_code", "description": "Requesting attorney code", "meta": {}, "data_type": "varchar(8)", "constraints": [], "quote": null, "tags": []}, "district": {"name": "district", "description": "District associated with the master record", "meta": {}, "data_type": "varchar(17)", "constraints": [], "quote": null, "tags": []}, "request_date": {"name": "request_date", "description": "Timestamp indicating the request date", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "maiden_name": {"name": "maiden_name", "description": "Maiden name", "meta": {}, "data_type": "varchar(80)", "constraints": [], "quote": null, "tags": []}, "account_manager": {"name": "account_manager", "description": "Account manager associated with the master record", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "trial_date": {"name": "trial_date", "description": "Timestamp indicating the trial date", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Timestamp indicating the death date", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "complaint": {"name": "complaint", "description": "Complaint associated with the master record", "meta": {}, "data_type": "varchar(15)", "constraints": [], "quote": null, "tags": []}, "firm_code": {"name": "firm_code", "description": "Firm code", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "plan_code": {"name": "plan_code", "description": "Plan code", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "requesting_paralegal": {"name": "requesting_paralegal", "description": "Requesting paralegal", "meta": {}, "data_type": "varchar(30)", "constraints": [], "quote": null, "tags": []}, "plaintiff_name": {"name": "plaintiff_name", "description": "Name of the plaintiff", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "lot_no": {"name": "lot_no", "description": "Lot number", "meta": {}, "data_type": "varchar(21)", "constraints": [], "quote": null, "tags": []}, "source_code": {"name": "source_code", "description": "Source code", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "attorney_last_name": {"name": "attorney_last_name", "description": "Last name of the attorney", "meta": {}, "data_type": "varchar(25)", "constraints": [], "quote": null, "tags": []}, "attorney_first_initial": {"name": "attorney_first_initial", "description": "First name initial of the attorney", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "court": {"name": "court", "description": "Court associated with the master record", "meta": {}, "data_type": "varchar(14)", "constraints": [], "quote": null, "tags": []}, "court2": {"name": "court2", "description": "Second court associated with the master record", "meta": {}, "data_type": "varchar(14)", "constraints": [], "quote": null, "tags": []}, "occupation": {"name": "occupation", "description": "Occupation associated with the master record", "meta": {}, "data_type": "varchar(20)", "constraints": [], "quote": null, "tags": []}, "case_no": {"name": "case_no", "description": "Case number", "meta": {}, "data_type": "varchar(35)", "constraints": [], "quote": null, "tags": []}, "address1": {"name": "address1", "description": "Address line 1", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name", "meta": {}, "data_type": "varchar(15)", "constraints": [], "quote": null, "tags": []}, "county": {"name": "county", "description": "County associated with the master record", "meta": {}, "data_type": "varchar(14)", "constraints": [], "quote": null, "tags": []}, "address2": {"name": "address2", "description": "Address line 2", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "is_testcase": {"name": "is_testcase", "description": "Boolean flag indicating if the master record is a test case", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_template": {"name": "is_template", "description": "Boolean flag indicating if the master record is a template", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the master record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the master record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "master_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["master_key", "created_ts"]}, "created_at": 1708553245.4952984, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_masters", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='master_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['master_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawmasters as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblmaster') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        master_ident::number as master_key,\r\n        trim(id_tblmaster)::varchar(256) as id_tblmaster,\r\n        trim(division)::varchar(15) as division,\r\n        trim(plcap)::varchar(200) as plaintiff_caption,\r\n        trim(bb_no)::varchar(4) as bb_no,\r\n        trim(asb_case)::varchar(5) as asb_case_no,\r\n        trim(cl_code)::varchar(10) as client_code,\r\n        trim(category)::varchar(21) as category,\r\n        trim(rt_rep)::varchar(25) as rt_rep,\r\n        trim(claim_no)::varchar(60) as claim_no,\r\n        trim(pl_at_code)::varchar(8) as plaintiff_attorney_code,\r\n        trim(name_init)::varchar(1) as middle_name_initial,\r\n        trim(comment)::varchar(200) as comment,\r\n        trim(maiden_na2)::varchar(30) as maiden_name2,\r\n        trim(defcap)::varchar(200) as defendant_caption,\r\n        lrs_no::number as lrs_no,\r\n        trim(lrs_nocode)::varchar(1) as lrs_no_code,\r\n        trim(bill_code)::varchar(10) as bill_code,\r\n        trim(name_last)::varchar(15) as last_name,\r\n        wf_amount::number(19, 4) as witness_fee_amount,\r\n        trim(docket)::varchar(75) as docket_number,\r\n        active::boolean as is_active,\r\n        trim(businessunit)::varchar(5) as business_unit_code,\r\n        trim(defendantname)::varchar(250) as defendant_name,\r\n        magnacaseno::number as magna_case_no,\r\n        trim(area)::varchar(30) as area,\r\n        trim(litigation)::varchar(3) as litigation_code,\r\n        trim(rq_at_code)::varchar(8) as requesting_attorney_code,\r\n        trim(district)::varchar(17) as district,\r\n        req_date::timestamp_ntz(9) as request_date,\r\n        trim(maiden_nam)::varchar(80) as maiden_name,\r\n        trim(acct_mgr)::varchar(50) as account_manager,\r\n        trial_date::timestamp_ntz(9) as trial_date,\r\n        dth_date::timestamp_ntz(9) as death_date,\r\n        trim(complaint)::varchar(15) as complaint,\r\n        trim(firmcode)::varchar(10) as firm_code,\r\n        trim(plan)::varchar(2) as plan_code,\r\n        trim(req_para)::varchar(30) as requesting_paralegal,\r\n        trim(plaintiff)::varchar(50) as plaintiff_name,\r\n        trim(lot_no)::varchar(21) as lot_no,\r\n        trim(source)::varchar(2) as source_code,\r\n        trim(attorney)::varchar(25) as attorney_last_name,\r\n        trim(attyfirst)::varchar(1) as attorney_first_initial,\r\n        trim(court)::varchar(14) as court,\r\n        trim(court2)::varchar(14) as court2,\r\n        trim(occupation)::varchar(20) as occupation,\r\n        trim(\"CASE\")::varchar(35) as case_no,\r\n        trim(add1)::varchar(50) as address1,\r\n        trim(name_first)::varchar(15) as first_name,\r\n        trim(county)::varchar(14) as county,\r\n        trim(add2)::varchar(50) as address2,\r\n        testcase::boolean as is_testcase,\r\n        template::boolean as is_template,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawmasters\r\n    union\r\n    select\r\n        -1 as master_key,\r\n        'UNKNOWN' as id_tblmaster,\r\n        'UNKNOWN' as division,\r\n        'UNKNOWN' as plaintiff_caption,\r\n        '' as bb_no,\r\n        '' as asb_case_no,\r\n        'UNKNOWN' as client_code,\r\n        'UNKNOWN' as category,\r\n        'UNKNOWN' as rt_rep,\r\n        'UNKNOWN' as claim_no,\r\n        'UNKNOWN' as plaintiff_attorney_code,\r\n        '' as middle_name_initial,\r\n        '' as comment,\r\n        'UNKNOWN' as maiden_name2,\r\n        'UNKNOWN' as defendant_caption,\r\n        -1 as lrs_no,\r\n        '' as lrs_no_code,\r\n        'UNKNOWN' as bill_code,\r\n        'UNKNOWN' as last_name,\r\n        0::number(19, 4) as witness_fee_amount,\r\n        'UNKNOWN' as docket_number,\r\n        1::boolean as is_active,\r\n        '' as business_unit_code,\r\n        'UNKNOWN' as defendant_name,\r\n        -1::number as magna_case_no,\r\n        'UNKNOWN' as area,\r\n        'UNK' as litigation_code,\r\n        'UNKNOWN' as requesting_attorney_code,\r\n        'UNKNOWN' as district,\r\n        '1900-01-01'::timestamp_ntz(9) as request_date,\r\n        'UNKNOWN' as maiden_name,\r\n        'UNKNOWN' as account_manager,\r\n        '1900-01-01'::timestamp_ntz(9) as trial_date,\r\n        '1900-01-01'::timestamp_ntz(9) as death_date,\r\n        '' as complaint,\r\n        'UNKNOWN' as firm_code,\r\n        '' as plan_code,\r\n        'UNKNOWN' as requesting_paralegal,\r\n        'UNKNOWN' as plaintiff_name,\r\n        'UNKNOWN' as lot_no,\r\n        '' as source_code,\r\n        'UNKNOWN' as attorney_last_name,\r\n        '' as attorney_first_initial,\r\n        'UNKNOWN' as court,\r\n        'UNKNOWN' as court2,\r\n        'UNKNOWN' as occupation,\r\n        'UNKNOWN' as case_no,\r\n        'UNKNOWN' as address1,\r\n        'UNKNOWN' as first_name,\r\n        'UNKNOWN' as county,\r\n        'UNKNOWN' as address2,\r\n        NULL::boolean as is_testcase,\r\n        NULL::boolean as is_template,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where master_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblmaster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblmaster"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_masters.sql", "compiled": true, "compiled_code": "\n\nwith rawmasters as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblmaster\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_masters)\n    \n\n),\n\nfinal as (\n    select\n        master_ident::number as master_key,\n        trim(id_tblmaster)::varchar(256) as id_tblmaster,\n        trim(division)::varchar(15) as division,\n        trim(plcap)::varchar(200) as plaintiff_caption,\n        trim(bb_no)::varchar(4) as bb_no,\n        trim(asb_case)::varchar(5) as asb_case_no,\n        trim(cl_code)::varchar(10) as client_code,\n        trim(category)::varchar(21) as category,\n        trim(rt_rep)::varchar(25) as rt_rep,\n        trim(claim_no)::varchar(60) as claim_no,\n        trim(pl_at_code)::varchar(8) as plaintiff_attorney_code,\n        trim(name_init)::varchar(1) as middle_name_initial,\n        trim(comment)::varchar(200) as comment,\n        trim(maiden_na2)::varchar(30) as maiden_name2,\n        trim(defcap)::varchar(200) as defendant_caption,\n        lrs_no::number as lrs_no,\n        trim(lrs_nocode)::varchar(1) as lrs_no_code,\n        trim(bill_code)::varchar(10) as bill_code,\n        trim(name_last)::varchar(15) as last_name,\n        wf_amount::number(19, 4) as witness_fee_amount,\n        trim(docket)::varchar(75) as docket_number,\n        active::boolean as is_active,\n        trim(businessunit)::varchar(5) as business_unit_code,\n        trim(defendantname)::varchar(250) as defendant_name,\n        magnacaseno::number as magna_case_no,\n        trim(area)::varchar(30) as area,\n        trim(litigation)::varchar(3) as litigation_code,\n        trim(rq_at_code)::varchar(8) as requesting_attorney_code,\n        trim(district)::varchar(17) as district,\n        req_date::timestamp_ntz(9) as request_date,\n        trim(maiden_nam)::varchar(80) as maiden_name,\n        trim(acct_mgr)::varchar(50) as account_manager,\n        trial_date::timestamp_ntz(9) as trial_date,\n        dth_date::timestamp_ntz(9) as death_date,\n        trim(complaint)::varchar(15) as complaint,\n        trim(firmcode)::varchar(10) as firm_code,\n        trim(plan)::varchar(2) as plan_code,\n        trim(req_para)::varchar(30) as requesting_paralegal,\n        trim(plaintiff)::varchar(50) as plaintiff_name,\n        trim(lot_no)::varchar(21) as lot_no,\n        trim(source)::varchar(2) as source_code,\n        trim(attorney)::varchar(25) as attorney_last_name,\n        trim(attyfirst)::varchar(1) as attorney_first_initial,\n        trim(court)::varchar(14) as court,\n        trim(court2)::varchar(14) as court2,\n        trim(occupation)::varchar(20) as occupation,\n        trim(\"CASE\")::varchar(35) as case_no,\n        trim(add1)::varchar(50) as address1,\n        trim(name_first)::varchar(15) as first_name,\n        trim(county)::varchar(14) as county,\n        trim(add2)::varchar(50) as address2,\n        testcase::boolean as is_testcase,\n        template::boolean as is_template,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawmasters\n    union\n    select\n        -1 as master_key,\n        'UNKNOWN' as id_tblmaster,\n        'UNKNOWN' as division,\n        'UNKNOWN' as plaintiff_caption,\n        '' as bb_no,\n        '' as asb_case_no,\n        'UNKNOWN' as client_code,\n        'UNKNOWN' as category,\n        'UNKNOWN' as rt_rep,\n        'UNKNOWN' as claim_no,\n        'UNKNOWN' as plaintiff_attorney_code,\n        '' as middle_name_initial,\n        '' as comment,\n        'UNKNOWN' as maiden_name2,\n        'UNKNOWN' as defendant_caption,\n        -1 as lrs_no,\n        '' as lrs_no_code,\n        'UNKNOWN' as bill_code,\n        'UNKNOWN' as last_name,\n        0::number(19, 4) as witness_fee_amount,\n        'UNKNOWN' as docket_number,\n        1::boolean as is_active,\n        '' as business_unit_code,\n        'UNKNOWN' as defendant_name,\n        -1::number as magna_case_no,\n        'UNKNOWN' as area,\n        'UNK' as litigation_code,\n        'UNKNOWN' as requesting_attorney_code,\n        'UNKNOWN' as district,\n        '1900-01-01'::timestamp_ntz(9) as request_date,\n        'UNKNOWN' as maiden_name,\n        'UNKNOWN' as account_manager,\n        '1900-01-01'::timestamp_ntz(9) as trial_date,\n        '1900-01-01'::timestamp_ntz(9) as death_date,\n        '' as complaint,\n        'UNKNOWN' as firm_code,\n        '' as plan_code,\n        'UNKNOWN' as requesting_paralegal,\n        'UNKNOWN' as plaintiff_name,\n        'UNKNOWN' as lot_no,\n        '' as source_code,\n        'UNKNOWN' as attorney_last_name,\n        '' as attorney_first_initial,\n        'UNKNOWN' as court,\n        'UNKNOWN' as court2,\n        'UNKNOWN' as occupation,\n        'UNKNOWN' as case_no,\n        'UNKNOWN' as address1,\n        'UNKNOWN' as first_name,\n        'UNKNOWN' as county,\n        'UNKNOWN' as address2,\n        NULL::boolean as is_testcase,\n        NULL::boolean as is_template,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_masters where master_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_offices": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_offices", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_offices.sql", "original_file_path": "models\\final\\dim_offices.sql", "unique_id": "model.recordtrak.dim_offices", "fqn": ["recordtrak", "final", "dim_offices"], "alias": "dim_offices", "checksum": {"name": "sha256", "checksum": "4c8d4fc945348f1147813082562fa47af71b3950c4bbca5e6a7f41b3bdac93cc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "office_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["offices_key", "created_ts"]}, "tags": [], "description": "Dimension table for office details", "columns": {"office_key": {"name": "office_key", "description": "Primary key for the office dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tbloffice": {"name": "id_tbloffice", "description": "ID for the office in the TBLOFFICE table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "office_code": {"name": "office_code", "description": "Office code", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "area_code_1": {"name": "area_code_1", "description": "Area code 1", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "area_code_2": {"name": "area_code_2", "description": "Area code 2", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "area_code_3": {"name": "area_code_3", "description": "Area code 3", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "area_code_4": {"name": "area_code_4", "description": "Area code 4", "meta": {}, "data_type": "varchar(3)", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "State associated with the office", "meta": {}, "data_type": "varchar(2)", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the office", "meta": {}, "data_type": "varchar(20)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the office is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the office record was created", "meta": {}, "data_type": "timestamp_tz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the office record was last updated", "meta": {}, "data_type": "timestamp_tz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "office_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["offices_key", "created_ts"]}, "created_at": 1708553245.4994595, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_offices", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='office_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['offices_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawoffices as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tbloffice') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        abs(hash(id_tbloffice))::number as office_key,\r\n        trim(id_tbloffice) as id_tbloffice,\r\n        trim(code)::varchar(1) as office_code,\r\n        trim(areacode1)::varchar(3) as area_code_1,\r\n        trim(areacode2)::varchar(3) as area_code_2,\r\n        trim(areacode3)::varchar(3) as area_code_3,\r\n        trim(areacode4)::varchar(3) as area_code_4,\r\n        trim(state)::varchar(2) as state,\r\n        trim(desc)::varchar(20) as description,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawoffices\r\n    union\r\n    select\r\n        -1 as office_key,\r\n        'UNKNOWN' as id_tbloffice,\r\n        '' as office_code,\r\n        'UNK' as area_code_1,\r\n        'UNK' as area_code_2,\r\n        'UNK' as area_code_3,\r\n        'UNK' as area_code_4,\r\n        '' as state,\r\n        '' as description,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where office_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbloffice"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbloffice"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_offices.sql", "compiled": true, "compiled_code": "\n\nwith rawoffices as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbloffice\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_offices)\n    \n\n),\n\nfinal as (\n    select\n        abs(hash(id_tbloffice))::number as office_key,\n        trim(id_tbloffice) as id_tbloffice,\n        trim(code)::varchar(1) as office_code,\n        trim(areacode1)::varchar(3) as area_code_1,\n        trim(areacode2)::varchar(3) as area_code_2,\n        trim(areacode3)::varchar(3) as area_code_3,\n        trim(areacode4)::varchar(3) as area_code_4,\n        trim(state)::varchar(2) as state,\n        trim(desc)::varchar(20) as description,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawoffices\n    union\n    select\n        -1 as office_key,\n        'UNKNOWN' as id_tbloffice,\n        '' as office_code,\n        'UNK' as area_code_1,\n        'UNK' as area_code_2,\n        'UNK' as area_code_3,\n        'UNK' as area_code_4,\n        '' as state,\n        '' as description,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_offices where office_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_payments": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_payments", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_payments.sql", "original_file_path": "models\\final\\dim_payments.sql", "unique_id": "model.recordtrak.dim_payments", "fqn": ["recordtrak", "final", "dim_payments"], "alias": "dim_payments", "checksum": {"name": "sha256", "checksum": "d5670e55d2eb2eb08328d5d6fd1c5b8415be12d9eb1dcd01e439c6c36049f254"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "payment_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["payment_key", "created_ts"]}, "tags": [], "description": "Dimension table for payments", "columns": {"payment_key": {"name": "payment_key", "description": "Primary key for the payment dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "Invoice number associated with the payment", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the payment is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "Payment ID", "meta": {}, "data_type": "number(19, 0)", "constraints": [], "quote": null, "tags": []}, "check_id": {"name": "check_id", "description": "Check ID associated with the payment", "meta": {}, "data_type": "number(19, 0)", "constraints": [], "quote": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Type of payment", "meta": {}, "data_type": "varchar(16)", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the payment record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the payment record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "payment_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["payment_key", "created_ts"]}, "created_at": 1708553245.5013022, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_payments", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='payment_key',\n        incremental_stretegy='merge',\n        merge_exclude_columns=['payment_key', 'created_ts']\n    )\n}}\n\nwith rawpayments as (\n    select * from {{ source('recordtrak', 'recordtrak_accounting_tblpayments') }}\n\n    {% if is_incremental() %}\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\n    {% endif %}\n\n),\n\nfinal as (\n    select\n        sequenceid::number as payment_key,\n        fldinvoicenum::number as invoice_number,\n        active::boolean as is_active,\n        fldpaymentid::number(19, 0) as payment_id,\n        fldcheckid::number(19, 0) as check_id,\n        trim(fldpaymenttype)::varchar(16) as payment_type,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawpayments\n    union\n    select\n        -1 as payment_key,\n        -1 as invoice_number,\n        1 as is_active,\n        -1 as payment_id,\n        -1 as check_id,\n        '' as payment_type,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    {% if is_incremental() %}\n        where not exists (select 1 from {{ this }} where payment_key = -1)\n    {% endif %}\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_accounting_tblpayments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_accounting_tblpayments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_payments.sql", "compiled": true, "compiled_code": "\n\nwith rawpayments as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblpayments\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_payments)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as payment_key,\n        fldinvoicenum::number as invoice_number,\n        active::boolean as is_active,\n        fldpaymentid::number(19, 0) as payment_id,\n        fldcheckid::number(19, 0) as check_id,\n        trim(fldpaymenttype)::varchar(16) as payment_type,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawpayments\n    union\n    select\n        -1 as payment_key,\n        -1 as invoice_number,\n        1 as is_active,\n        -1 as payment_id,\n        -1 as check_id,\n        '' as payment_type,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_payments where payment_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_qc_jobs_queues": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_qc_jobs_queues", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_qc_jobs_queues.sql", "original_file_path": "models\\final\\dim_qc_jobs_queues.sql", "unique_id": "model.recordtrak.dim_qc_jobs_queues", "fqn": ["recordtrak", "final", "dim_qc_jobs_queues"], "alias": "dim_qc_jobs_queues", "checksum": {"name": "sha256", "checksum": "cd86c7b6b9a45e8af13828b0c9bfbeb4b27c1a535f60941b61231583d493d367"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "qc_jobs_queue_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["qc_jobs_queue_key", "created_ts"]}, "tags": [], "description": "Dimension table for QC jobs queue", "columns": {"qc_jobs_queue_key": {"name": "qc_jobs_queue_key", "description": "Primary key for the QC jobs queue dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "qc_client_code": {"name": "qc_client_code", "description": "Client code associated with the QC job", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "qc_status": {"name": "qc_status", "description": "Status of the QC job", "meta": {}, "data_type": "varchar(4)", "constraints": [], "quote": null, "tags": []}, "is_qc_active": {"name": "is_qc_active", "description": "Boolean flag indicating if the QC job is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the QC job record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the QC job record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "qc_jobs_queue_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["qc_jobs_queue_key", "created_ts"]}, "created_at": 1708553245.5032973, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='qc_jobs_queue_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['qc_jobs_queue_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawqcjobsqueues as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblqcjobsqueue') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        qc_sequence::number as qc_jobs_queue_key,\r\n        trim(qc_cl_code)::varchar(10) as qc_client_code,\r\n        trim(qc_status)::varchar(4) as qc_status,\r\n        qc_active::boolean as is_qc_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawqcjobsqueues\r\n    union\r\n    select\r\n        -1 as qc_jobs_queue_key,\r\n        'UNKNOWN' as qc_client_code,\r\n        '' as qc_status,\r\n        1 as is_qc_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where qc_jobs_queue_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblqcjobsqueue"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_qc_jobs_queues.sql", "compiled": true, "compiled_code": "\n\nwith rawqcjobsqueues as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblqcjobsqueue\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues)\n    \n\n),\n\nfinal as (\n    select\n        qc_sequence::number as qc_jobs_queue_key,\n        trim(qc_cl_code)::varchar(10) as qc_client_code,\n        trim(qc_status)::varchar(4) as qc_status,\n        qc_active::boolean as is_qc_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawqcjobsqueues\n    union\n    select\n        -1 as qc_jobs_queue_key,\n        'UNKNOWN' as qc_client_code,\n        '' as qc_status,\n        1 as is_qc_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues where qc_jobs_queue_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_requests": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_requests", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_requests.sql", "original_file_path": "models\\final\\dim_requests.sql", "unique_id": "model.recordtrak.dim_requests", "fqn": ["recordtrak", "final", "dim_requests"], "alias": "dim_requests", "checksum": {"name": "sha256", "checksum": "1cd2631d432870e79c5b51a375e789586f5e7c7b90b65f4bd3911e7f78748493"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "request_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["request_key", "created_ts"]}, "tags": [], "description": "Dimension table for requests", "columns": {"request_key": {"name": "request_key", "description": "Primary key for the request dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblrequests": {"name": "id_tblrequests", "description": "ID for the requests in the TBLREQUESTS table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "client_code": {"name": "client_code", "description": "Client code associated with the request", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the request", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Tag associated with the request", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "request_status": {"name": "request_status", "description": "Status of the request", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "draft_number": {"name": "draft_number", "description": "Draft number associated with the request", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "is_hold": {"name": "is_hold", "description": "Boolean flag indicating if the request is on hold", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_am_resp": {"name": "is_am_resp", "description": "Boolean flag indicating if the request has AM response", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "is_reissue": {"name": "is_reissue", "description": "Boolean flag indicating if the request is a reissue", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "send_date": {"name": "send_date", "description": "Timestamp when the request was sent", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "request_date": {"name": "request_date", "description": "Timestamp when the request was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "expiry_date": {"name": "expiry_date", "description": "Timestamp indicating the expiry date of the request", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "am_resp_date": {"name": "am_resp_date", "description": "Timestamp when AM response was received", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "released_date": {"name": "released_date", "description": "Timestamp when the request was released", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the request is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the request record was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the request record was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "request_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["request_key", "created_ts"]}, "created_at": 1708553245.5092974, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_requests", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='request_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['request_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawrequests as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblrequest') }}\r\n\r\n    {% if is_incremental() %}\r\n        where greatest(coalesce(created, '1900-01-01'), coalesce(edited, '1900-01-01'))::timestamp_ntz(9) > (select coalesce(max(source_last_updated_at), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as request_key,\r\n        trim(id_tblrequests)::varchar(256) as id_tblrequests,\r\n        trim(cl_code)::varchar(10) as client_code,\r\n        trim(descript)::varchar(50) as description,\r\n        tag::number as tag,\r\n        trim(status)::varchar(1) as request_status,\r\n        draft::number as draft_number,\r\n        hold::boolean as is_hold,\r\n        am_resp::boolean as is_am_resp,\r\n        reissue::boolean as is_reissue,\r\n        fin_date::timestamp_ntz(9) as received_date,\r\n        send_date::timestamp_ntz(9) as send_date,\r\n        req_date::timestamp_ntz(9) as request_date,\r\n        expdate::timestamp_ntz(9) as expiry_date,\r\n        dt_am_resp::timestamp_ntz(9) as am_resp_date,\r\n        released::timestamp_ntz as released_date,\r\n        active::boolean as is_active,\r\n        greatest(coalesce(created, '1900-01-01'), coalesce(edited, '1900-01-01'))::timestamp_ntz(9) as source_last_updated_at,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawrequests\r\n    union\r\n    select\r\n        -1 as request_key,\r\n        'UNKNOWN' as id_tblrequests,\r\n        'UNKNOWN' as client_code,\r\n        '' as description,\r\n        -1 as tag,\r\n        '' as request_status,\r\n        -1 as draft_number,\r\n        NULL as is_hold,\r\n        NULL as is_am_resp,\r\n        NULL as is_reissue,\r\n        '1900-01-01' as received_date,\r\n        '1900-01-01' as send_date,\r\n        '1900-01-01' as request_date,\r\n        '1900-01-01' as expiry_date,\r\n        '1900-01-01' as am_resp_date,\r\n        '1900-01-01' as released_date,\r\n        1 as is_active,\r\n        '1900-01-01' as source_last_updated_at,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where request_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblrequest"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblrequest"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_requests.sql", "compiled": true, "compiled_code": "\n\nwith rawrequests as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblrequest\n\n    \n        where greatest(coalesce(created, '1900-01-01'), coalesce(edited, '1900-01-01'))::timestamp_ntz(9) > (select coalesce(max(source_last_updated_at), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_requests)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as request_key,\n        trim(id_tblrequests)::varchar(256) as id_tblrequests,\n        trim(cl_code)::varchar(10) as client_code,\n        trim(descript)::varchar(50) as description,\n        tag::number as tag,\n        trim(status)::varchar(1) as request_status,\n        draft::number as draft_number,\n        hold::boolean as is_hold,\n        am_resp::boolean as is_am_resp,\n        reissue::boolean as is_reissue,\n        fin_date::timestamp_ntz(9) as received_date,\n        send_date::timestamp_ntz(9) as send_date,\n        req_date::timestamp_ntz(9) as request_date,\n        expdate::timestamp_ntz(9) as expiry_date,\n        dt_am_resp::timestamp_ntz(9) as am_resp_date,\n        released::timestamp_ntz as released_date,\n        active::boolean as is_active,\n        greatest(coalesce(created, '1900-01-01'), coalesce(edited, '1900-01-01'))::timestamp_ntz(9) as source_last_updated_at,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawrequests\n    union\n    select\n        -1 as request_key,\n        'UNKNOWN' as id_tblrequests,\n        'UNKNOWN' as client_code,\n        '' as description,\n        -1 as tag,\n        '' as request_status,\n        -1 as draft_number,\n        NULL as is_hold,\n        NULL as is_am_resp,\n        NULL as is_reissue,\n        '1900-01-01' as received_date,\n        '1900-01-01' as send_date,\n        '1900-01-01' as request_date,\n        '1900-01-01' as expiry_date,\n        '1900-01-01' as am_resp_date,\n        '1900-01-01' as released_date,\n        1 as is_active,\n        '1900-01-01' as source_last_updated_at,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_requests where request_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_stc_queues": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_stc_queues", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_stc_queues.sql", "original_file_path": "models\\final\\dim_stc_queues.sql", "unique_id": "model.recordtrak.dim_stc_queues", "fqn": ["recordtrak", "final", "dim_stc_queues"], "alias": "dim_stc_queues", "checksum": {"name": "sha256", "checksum": "1a5c969c1419f8d91b5b2f614ef3bd53ccbca6528c751b0a2f5a5fb8467e3957"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "stc_queue_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["stc_queue_key", "created_ts"]}, "tags": [], "description": "Dimension table for STC queue", "columns": {"stc_queue_key": {"name": "stc_queue_key", "description": "Primary key for the STC queue dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tblstcqueue": {"name": "id_tblstcqueue", "description": "ID for the STC queue in the TBLSTCQUEUE table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "client_code": {"name": "client_code", "description": "Client code associated with the STC queue", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "attorney_code": {"name": "attorney_code", "description": "Attorney code associated with the STC queue", "meta": {}, "data_type": "varchar(8)", "constraints": [], "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Tag associated with the STC queue", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "sent_date": {"name": "sent_date", "description": "Timestamp when the STC queue was sent", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "sent_by": {"name": "sent_by", "description": "Person or entity who sent the STC queue", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the STC queue is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the STC queue was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the STC queue was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "stc_queue_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["stc_queue_key", "created_ts"]}, "created_at": 1708553245.5113094, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_stc_queues", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='stc_queue_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['stc_queue_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawstcqueues as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tblstcqueue') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as stc_queue_key,\r\n        trim(id_tblstcqueue)::varchar(256) as id_tblstcqueue,\r\n        trim(cl_code)::varchar(10) as client_code,\r\n        trim(at_code)::varchar(8) as attorney_code,\r\n        tag::number as tag,\r\n        sent::timestamp_ntz(9) as sent_date,\r\n        trim(sentby)::varchar(50) as sent_by,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawstcqueues\r\n    union\r\n    select\r\n        -1 as stc_queue_key,\r\n        'UNKNOWN' as id_tblstcqueue,\r\n        'UNKNOWN' as client_code,\r\n        'UNKNOWN' as attorney_code,\r\n        -1 as tag,\r\n        '1900-01-01' as sent_date,\r\n        'UNKNOWN'::varchar(50) as sent_by,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where stc_queue_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblstcqueue"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblstcqueue"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_stc_queues.sql", "compiled": true, "compiled_code": "\n\nwith rawstcqueues as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblstcqueue\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_stc_queues)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as stc_queue_key,\n        trim(id_tblstcqueue)::varchar(256) as id_tblstcqueue,\n        trim(cl_code)::varchar(10) as client_code,\n        trim(at_code)::varchar(8) as attorney_code,\n        tag::number as tag,\n        sent::timestamp_ntz(9) as sent_date,\n        trim(sentby)::varchar(50) as sent_by,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawstcqueues\n    union\n    select\n        -1 as stc_queue_key,\n        'UNKNOWN' as id_tblstcqueue,\n        'UNKNOWN' as client_code,\n        'UNKNOWN' as attorney_code,\n        -1 as tag,\n        '1900-01-01' as sent_date,\n        'UNKNOWN'::varchar(50) as sent_by,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_stc_queues where stc_queue_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_tag_items": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_tag_items", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_tag_items.sql", "original_file_path": "models\\final\\dim_tag_items.sql", "unique_id": "model.recordtrak.dim_tag_items", "fqn": ["recordtrak", "final", "dim_tag_items"], "alias": "dim_tag_items", "checksum": {"name": "sha256", "checksum": "996d6894cbdabb477dbfc591d5bb8d86a83cb2464bfb8beba7edbc0816cfd941"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tag_item_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["tag_item_key", "created_ts"]}, "tags": [], "description": "Dimension table for tag items", "columns": {"tag_item_key": {"name": "tag_item_key", "description": "Primary key for the tag item dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tbltagitem": {"name": "id_tbltagitem", "description": "ID for the tag item in the TBLTAGITEM table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "lrs_number": {"name": "lrs_number", "description": "LRS number associated with the tag item", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Tag associated with the tag item", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "scan_date": {"name": "scan_date", "description": "Timestamp when the tag item was scanned", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "deleted_date": {"name": "deleted_date", "description": "Timestamp when the tag item was deleted", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "manual_date": {"name": "manual_date", "description": "Timestamp when the tag item was manually processed", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "rss_done_date": {"name": "rss_done_date", "description": "Timestamp when the RSS processing was done for the tag item", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the tag item is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the tag item was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the tag item was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "tag_item_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["tag_item_key", "created_ts"]}, "created_at": 1708553245.5143032, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_tag_items", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='tag_item_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['tag_item_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawtagitems as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tbltagitem') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        nid::number as tag_item_key,\r\n        trim(id_tbltagitem)::varchar(256) as id_tbltagitem,\r\n        lrs_no::number as lrs_number,\r\n        tag::number as tag,\r\n        scan_date::timestamp_ntz(9) as scan_date,\r\n        deleted::timestamp_ntz(9) as deleted_date,\r\n        dtmanual::timestamp_ntz(9) as manual_date,\r\n        dtrssdone::timestamp_ntz(9) as rss_done_date,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawtagitems\r\n    union\r\n    select\r\n        -1 as tag_item_key,\r\n        'UNKNOWN' as id_tbltagitem,\r\n        -1 as lrs_number,\r\n        -1 as tag,\r\n        '1900-01-01' as scan_date,\r\n        '1900-01-01' as deleted_date,\r\n        '1900-01-01' as manual_date,\r\n        '1900-01-01' as rss_done_date,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where tag_item_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbltagitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbltagitem"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_tag_items.sql", "compiled": true, "compiled_code": "\n\nwith rawtagitems as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltagitem\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_tag_items)\n    \n\n),\n\nfinal as (\n    select\n        nid::number as tag_item_key,\n        trim(id_tbltagitem)::varchar(256) as id_tbltagitem,\n        lrs_no::number as lrs_number,\n        tag::number as tag,\n        scan_date::timestamp_ntz(9) as scan_date,\n        deleted::timestamp_ntz(9) as deleted_date,\n        dtmanual::timestamp_ntz(9) as manual_date,\n        dtrssdone::timestamp_ntz(9) as rss_done_date,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawtagitems\n    union\n    select\n        -1 as tag_item_key,\n        'UNKNOWN' as id_tbltagitem,\n        -1 as lrs_number,\n        -1 as tag,\n        '1900-01-01' as scan_date,\n        '1900-01-01' as deleted_date,\n        '1900-01-01' as manual_date,\n        '1900-01-01' as rss_done_date,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_tag_items where tag_item_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.dim_timesheets": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dim_timesheets", "resource_type": "model", "package_name": "recordtrak", "path": "final\\dim_timesheets.sql", "original_file_path": "models\\final\\dim_timesheets.sql", "unique_id": "model.recordtrak.dim_timesheets", "fqn": ["recordtrak", "final", "dim_timesheets"], "alias": "dim_timesheets", "checksum": {"name": "sha256", "checksum": "453c453725632b4bf416023e574d9baaaf0f3c46b75ed082a336888097da3ac3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "timesheet_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["timesheet_key", "created_ts"]}, "tags": [], "description": "Dimension table for timesheets", "columns": {"timesheet_key": {"name": "timesheet_key", "description": "Primary key for the timesheet dimension", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "id_tbltimesheet": {"name": "id_tbltimesheet", "description": "ID for the timesheet in the TBLTIMESHEET table", "meta": {}, "data_type": "varchar(256)", "constraints": [], "quote": null, "tags": []}, "client_code": {"name": "client_code", "description": "Client code associated with the timesheet", "meta": {}, "data_type": "varchar(10)", "constraints": [], "quote": null, "tags": []}, "tag": {"name": "tag", "description": "Tag associated with the timesheet", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "timesheet_type": {"name": "timesheet_type", "description": "Type of the timesheet", "meta": {}, "data_type": "varchar(1)", "constraints": [], "quote": null, "tags": []}, "transaction_code": {"name": "transaction_code", "description": "Transaction code associated with the timesheet", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "transaction_date": {"name": "transaction_date", "description": "Timestamp when the timesheet transaction occurred", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the timesheet", "meta": {}, "data_type": "varchar(50)", "constraints": [], "quote": null, "tags": []}, "deleted_date": {"name": "deleted_date", "description": "Timestamp when the timesheet was deleted", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Boolean flag indicating if the timesheet is active", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp when the timesheet was created", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp when the timesheet was last updated", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "timesheet_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["timesheet_key", "created_ts"]}, "created_at": 1708553245.517315, "relation_name": "HARMONIZED_DEV.RECORDTRAK.dim_timesheets", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='timesheet_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['timesheet_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith rawtimesheets as (\r\n    select * from {{ source('recordtrak', 'recordtrak_tbltimesheet') }}\r\n\r\n    {% if is_incremental() %}\r\n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from {{ this }})\r\n    {% endif %}\r\n\r\n),\r\n\r\nfinal as (\r\n    select\r\n        sequenceid::number as timesheet_key,\r\n        trim(id_tbltimesheet)::varchar(256) as id_tbltimesheet,\r\n        trim(cl_code)::varchar(10) as client_code,\r\n        tag::number as tag,\r\n        trim(type)::varchar(1) as timesheet_type,\r\n        txn_code::number as transaction_code,\r\n        txn_date::timestamp_ntz(9) as transaction_date,\r\n        trim(descript)::varchar(50) as description,\r\n        deleted::timestamp_ntz(9) as deleted_date,\r\n        active::boolean as is_active,\r\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        current_timestamp::timestamp_ntz(9) as created_ts,\r\n        current_timestamp::timestamp_ntz(9) as updated_ts\r\n    from rawtimesheets\r\n    union\r\n    select\r\n        -1 as timesheet_key,\r\n        'UNKNOWN' as id_tbltimesheet,\r\n        'UNKNOWN' as client_code,\r\n        -1 as tag,\r\n        '' as timesheet_type,\r\n        -1 as transaction_code,\r\n        '1900-01-01' as transaction_date,\r\n        '' as description,\r\n        '1900-01-01' as deleted_date,\r\n        1 as is_active,\r\n        '1900-01-01' as harmonized_created_ts,\r\n        current_timestamp as created_ts,\r\n        current_timestamp as updated_ts\r\n\r\n    {% if is_incremental() %}\r\n        where not exists (select 1 from {{ this }} where timesheet_key = -1)\r\n    {% endif %}\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbltimesheet"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbltimesheet"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\dim_timesheets.sql", "compiled": true, "compiled_code": "\n\nwith rawtimesheets as (\n    select * from HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltimesheet\n\n    \n        where metadata_created_at > (select coalesce(max(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.dim_timesheets)\n    \n\n),\n\nfinal as (\n    select\n        sequenceid::number as timesheet_key,\n        trim(id_tbltimesheet)::varchar(256) as id_tbltimesheet,\n        trim(cl_code)::varchar(10) as client_code,\n        tag::number as tag,\n        trim(type)::varchar(1) as timesheet_type,\n        txn_code::number as transaction_code,\n        txn_date::timestamp_ntz(9) as transaction_date,\n        trim(descript)::varchar(50) as description,\n        deleted::timestamp_ntz(9) as deleted_date,\n        active::boolean as is_active,\n        metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        current_timestamp::timestamp_ntz(9) as created_ts,\n        current_timestamp::timestamp_ntz(9) as updated_ts\n    from rawtimesheets\n    union\n    select\n        -1 as timesheet_key,\n        'UNKNOWN' as id_tbltimesheet,\n        'UNKNOWN' as client_code,\n        -1 as tag,\n        '' as timesheet_type,\n        -1 as transaction_code,\n        '1900-01-01' as transaction_date,\n        '' as description,\n        '1900-01-01' as deleted_date,\n        1 as is_active,\n        '1900-01-01' as harmonized_created_ts,\n        current_timestamp as created_ts,\n        current_timestamp as updated_ts\n\n    \n        where not exists (select 1 from HARMONIZED_DEV.RECORDTRAK.dim_timesheets where timesheet_key = -1)\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.recordtrak.fact_invoices_payments": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "fact_invoices_payments", "resource_type": "model", "package_name": "recordtrak", "path": "final\\fact_invoices_payments.sql", "original_file_path": "models\\final\\fact_invoices_payments.sql", "unique_id": "model.recordtrak.fact_invoices_payments", "fqn": ["recordtrak", "final", "fact_invoices_payments"], "alias": "fact_invoices_payments", "checksum": {"name": "sha256", "checksum": "4cf931084bfc10cf2eca2699e04f0ee2e488482ad93db4754b965d8b0ee30ec1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "invoice_payment_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "transient": false, "recordtrak": null, "incremental_stretegy": "merge", "merge_exclude_columns": ["invoice_payment_key", "created_ts"]}, "tags": [], "description": "Table containing information about invoices and payments.", "columns": {"invoice_payment_key": {"name": "invoice_payment_key", "description": "Primary key for the table.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "invoice_key": {"name": "invoice_key", "description": "Foreign key referencing the invoice associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "invoice_date_key": {"name": "invoice_date_key", "description": "Foreign key referencing the date of the invoice.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "master_key": {"name": "master_key", "description": "Foreign key referencing the master record.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "office_key": {"name": "office_key", "description": "Foreign key referencing the office associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "business_unit_key": {"name": "business_unit_key", "description": "Foreign key referencing the business unit associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "defendant_key": {"name": "defendant_key", "description": "Foreign key referencing the defendant associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "client_key": {"name": "client_key", "description": "Foreign key referencing the client associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "firm_key": {"name": "firm_key", "description": "Foreign key referencing the firm associated with the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "payment_key": {"name": "payment_key", "description": "Foreign key referencing the payment record.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "payment_date_key": {"name": "payment_date_key", "description": "Foreign key referencing the date of the payment.", "meta": {}, "data_type": "number(38, 0)", "constraints": [], "quote": null, "tags": []}, "invoice_amount": {"name": "invoice_amount", "description": "Amount of the invoice.", "meta": {}, "data_type": "number(38, 4)", "constraints": [], "quote": null, "tags": []}, "sales_tax_amount": {"name": "sales_tax_amount", "description": "Sales tax amount associated with the payment.", "meta": {}, "data_type": "number(38, 4)", "constraints": [], "quote": null, "tags": []}, "witness_fee_amount": {"name": "witness_fee_amount", "description": "Amount of witness fee associated with the payment.", "meta": {}, "data_type": "number(38, 4)", "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "Total payment amount.", "meta": {}, "data_type": "number(38, 4)", "constraints": [], "quote": null, "tags": []}, "harmonized_created_ts": {"name": "harmonized_created_ts", "description": "Timestamp when the record was created in harmonized layer (METADATA_CREATED_AT)", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "created_ts": {"name": "created_ts", "description": "Timestamp indicating when the record was created.", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}, "updated_ts": {"name": "updated_ts", "description": "Timestamp indicating when the record was last updated.", "meta": {}, "data_type": "timestamp_ntz(9)", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "recordtrak://models\\final\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null, "materialized": "incremental", "unique_key": "invoice_payment_key", "incremental_stretegy": "merge", "merge_exclude_columns": ["invoice_payment_key", "created_ts"]}, "created_at": 1708553245.5213041, "relation_name": "HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments", "raw_code": "{{\r\n    config(\r\n        materialized='incremental',\r\n        unique_key='invoice_payment_key',\r\n        incremental_stretegy='merge',\r\n        merge_exclude_columns=['invoice_payment_key', 'created_ts']\r\n    )\r\n}}\r\n\r\nwith invoices as (\r\n    select\r\n        ABS(HASH(i.sequenceid, -1))::number as invoice_payment_key,\r\n        i.sequenceid::number as invoice_key,\r\n        ddi.date_key::number as invoice_date_key,\r\n        COALESCE(m.master_ident, -1)::number as master_key,\r\n        dof.office_key::number as office_key,\r\n        COALESCE(dbu.business_unit_key, -1)::number as business_unit_key,\r\n        COALESCE(ddf.defendant_key, -1)::number as defendant_key,\r\n        COALESCE(dcl.client_key, -1)::number as client_key,\r\n        COALESCE(dfi.firm_key, -1)::number as firm_key,\r\n        -1::number as payment_key,\r\n        19000101::number as payment_date_key,\r\n        COALESCE(i.fldinvoiceamount, 0)::number(38, 4) as invoice_amount,\r\n        COALESCE(i.fldsalestax, 0)::number(38, 4) as sales_tax_amount,\r\n        COALESCE(i.fldwitnessfee, 0)::number(38, 4) as witness_fee_amount,\r\n        0::number(38, 4) as payment_amount,\r\n        i.metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as created_ts,\r\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as updated_ts\r\n    -- Query joins\r\n    from harmonized_prod.prod_magna_agg.recordtrak_accounting_tblinvoices as i\r\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tblmaster as m on UPPER(TRIM(i.primaryclcode)) = UPPER(TRIM(m.cl_code))\r\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tbloffice as o on m.id_tbloffice = o.id_tbloffice\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblbill as l on UPPER(TRIM(m.cl_code)) = UPPER(TRIM(l.cl_code)) and UPPER(TRIM(m.rq_at_code)) = UPPER(TRIM(l.at_code)) and l.active = 1\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tbldefendant as d on UPPER(TRIM(i.fldatcode)) = UPPER(TRIM(d.at_code))\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblclient as c on d.id_tblclient = c.id_tblclient\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblfirm as f on c.id_tblfirm = f.id_tblfirm\r\n    -- Joins to get key columns\r\n    inner join {{ ref('dim_invoices') }} as din on i.sequenceid = din.invoice_key\r\n    inner join {{ ref('dim_dates') }} as ddi on TO_DATE(i.fldinvoicedate) = ddi.full_date\r\n    left join {{ ref('dim_offices') }} as dof on o.id_tbloffice = dof.id_tbloffice\r\n    left join {{ ref('dim_business_units') }} as dbu on UPPER(TRIM(l.businessunit)) = dbu.business_unit\r\n    left join {{ ref('dim_defendants') }} as ddf on d.id_tbldefendant = ddf.id_tbldefendant\r\n    left join {{ ref('dim_clients') }} as dcl on c.id_tblclient = dcl.id_tblclient\r\n    left join {{ ref('dim_firms') }} as dfi on f.id_tblfirm = dfi.id_tblfirm\r\n\r\n    {% if is_incremental() %}\r\n        where\r\n            i.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from {{ this }} where payment_key = -1)\r\n    {% endif %}\r\n\r\n),\r\n\r\npayments as (\r\n    select\r\n        ABS(HASH(i.sequenceid, p.sequenceid))::number as invoice_payment_key,\r\n        i.sequenceid::number as invoice_key,\r\n        ddi.date_key::number as invoice_date_key,\r\n        COALESCE(m.master_ident, -1)::number as master_key,\r\n        dof.office_key::number as office_key,\r\n        COALESCE(dbu.business_unit_key, -1)::number as businessunit_key,\r\n        COALESCE(ddf.defendant_key, -1)::number as defendant_key,\r\n        COALESCE(dcl.client_key, -1)::number as client_key,\r\n        COALESCE(dfi.firm_key, -1)::number as firm_key,\r\n        p.sequenceid::number as payment_key,\r\n        ddp.date_key::number as payment_date_key,\r\n        0::number(38, 4) as invoice_amount,\r\n        0::number(38, 4) as sales_tax_amount,\r\n        0::number(38, 4) as witness_fee_amount,\r\n        COALESCE(p.fldpaymentamt, 0)::number(38, 4) as payment_amount,\r\n        p.metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\r\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as created_ts,\r\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as updated_ts\r\n\r\n    -- Query joins\r\n    from harmonized_prod.prod_magna_agg.recordtrak_accounting_tblpayments as p\r\n    inner join harmonized_prod.prod_magna_agg.recordtrak_accounting_tblinvoices as i on p.fldinvoicenum = i.fldinvoicenumber\r\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tblmaster as m on UPPER(TRIM(i.primaryclcode)) = UPPER(TRIM(m.cl_code))\r\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tbloffice as o on m.id_tbloffice = o.id_tbloffice\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblbill as l on UPPER(TRIM(m.cl_code)) = UPPER(TRIM(l.cl_code)) and UPPER(TRIM(m.rq_at_code)) = UPPER(TRIM(l.at_code)) and l.active = 1\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tbldefendant as d on UPPER(TRIM(i.fldatcode)) = UPPER(TRIM(d.at_code))\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblclient as c on d.id_tblclient = c.id_tblclient\r\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblfirm as f on c.id_tblfirm = f.id_tblfirm\r\n    -- Joins to get key columns\r\n    inner join {{ ref('dim_payments') }} as pd on p.sequenceid = pd.payment_key\r\n    inner join {{ ref('dim_dates') }} as ddp on TO_DATE(p.fldpaymentdate) = ddp.full_date\r\n    inner join {{ ref('dim_dates') }} as ddi on TO_DATE(i.fldinvoicedate) = ddi.full_date\r\n    left join {{ ref('dim_offices') }} as dof on o.id_tbloffice = dof.id_tbloffice\r\n    left join {{ ref('dim_business_units') }} as dbu on UPPER(TRIM(l.businessunit)) = dbu.business_unit\r\n    left join {{ ref('dim_defendants') }} as ddf on d.id_tbldefendant = ddf.id_tbldefendant\r\n    left join {{ ref('dim_clients') }} as dcl on c.id_tblclient = dcl.id_tblclient\r\n    left join {{ ref('dim_firms') }} as dfi on f.id_tblfirm = dfi.id_tblfirm\r\n\r\n    {% if is_incremental() %}\r\n        where\r\n            i.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from {{ this }} where payment_key = -1)\r\n            or\r\n            p.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from {{ this }} where payment_key != -1)\r\n    {% endif %}\r\n),\r\n\r\nfinal as (\r\n    select * from invoices\r\n    union\r\n    select * from payments\r\n)\r\n\r\nselect * from final", "language": "sql", "refs": [{"name": "dim_invoices", "package": null, "version": null}, {"name": "dim_dates", "package": null, "version": null}, {"name": "dim_offices", "package": null, "version": null}, {"name": "dim_business_units", "package": null, "version": null}, {"name": "dim_defendants", "package": null, "version": null}, {"name": "dim_clients", "package": null, "version": null}, {"name": "dim_firms", "package": null, "version": null}, {"name": "dim_payments", "package": null, "version": null}, {"name": "dim_dates", "package": null, "version": null}, {"name": "dim_dates", "package": null, "version": null}, {"name": "dim_offices", "package": null, "version": null}, {"name": "dim_business_units", "package": null, "version": null}, {"name": "dim_defendants", "package": null, "version": null}, {"name": "dim_clients", "package": null, "version": null}, {"name": "dim_firms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.recordtrak.dim_invoices", "model.recordtrak.dim_dates", "model.recordtrak.dim_offices", "model.recordtrak.dim_business_units", "model.recordtrak.dim_defendants", "model.recordtrak.dim_clients", "model.recordtrak.dim_firms", "model.recordtrak.dim_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\fact_invoices_payments.sql", "compiled": true, "compiled_code": "\n\nwith invoices as (\n    select\n        ABS(HASH(i.sequenceid, -1))::number as invoice_payment_key,\n        i.sequenceid::number as invoice_key,\n        ddi.date_key::number as invoice_date_key,\n        COALESCE(m.master_ident, -1)::number as master_key,\n        dof.office_key::number as office_key,\n        COALESCE(dbu.business_unit_key, -1)::number as business_unit_key,\n        COALESCE(ddf.defendant_key, -1)::number as defendant_key,\n        COALESCE(dcl.client_key, -1)::number as client_key,\n        COALESCE(dfi.firm_key, -1)::number as firm_key,\n        -1::number as payment_key,\n        19000101::number as payment_date_key,\n        COALESCE(i.fldinvoiceamount, 0)::number(38, 4) as invoice_amount,\n        COALESCE(i.fldsalestax, 0)::number(38, 4) as sales_tax_amount,\n        COALESCE(i.fldwitnessfee, 0)::number(38, 4) as witness_fee_amount,\n        0::number(38, 4) as payment_amount,\n        i.metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as created_ts,\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as updated_ts\n    -- Query joins\n    from harmonized_prod.prod_magna_agg.recordtrak_accounting_tblinvoices as i\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tblmaster as m on UPPER(TRIM(i.primaryclcode)) = UPPER(TRIM(m.cl_code))\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tbloffice as o on m.id_tbloffice = o.id_tbloffice\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblbill as l on UPPER(TRIM(m.cl_code)) = UPPER(TRIM(l.cl_code)) and UPPER(TRIM(m.rq_at_code)) = UPPER(TRIM(l.at_code)) and l.active = 1\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tbldefendant as d on UPPER(TRIM(i.fldatcode)) = UPPER(TRIM(d.at_code))\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblclient as c on d.id_tblclient = c.id_tblclient\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblfirm as f on c.id_tblfirm = f.id_tblfirm\n    -- Joins to get key columns\n    inner join HARMONIZED_DEV.RECORDTRAK.dim_invoices as din on i.sequenceid = din.invoice_key\n    inner join HARMONIZED_DEV.RECORDTRAK.dim_dates as ddi on TO_DATE(i.fldinvoicedate) = ddi.full_date\n    left join HARMONIZED_DEV.RECORDTRAK.dim_offices as dof on o.id_tbloffice = dof.id_tbloffice\n    left join HARMONIZED_DEV.RECORDTRAK.dim_business_units as dbu on UPPER(TRIM(l.businessunit)) = dbu.business_unit\n    left join HARMONIZED_DEV.RECORDTRAK.dim_defendants as ddf on d.id_tbldefendant = ddf.id_tbldefendant\n    left join HARMONIZED_DEV.RECORDTRAK.dim_clients as dcl on c.id_tblclient = dcl.id_tblclient\n    left join HARMONIZED_DEV.RECORDTRAK.dim_firms as dfi on f.id_tblfirm = dfi.id_tblfirm\n\n    \n        where\n            i.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments where payment_key = -1)\n    \n\n),\n\npayments as (\n    select\n        ABS(HASH(i.sequenceid, p.sequenceid))::number as invoice_payment_key,\n        i.sequenceid::number as invoice_key,\n        ddi.date_key::number as invoice_date_key,\n        COALESCE(m.master_ident, -1)::number as master_key,\n        dof.office_key::number as office_key,\n        COALESCE(dbu.business_unit_key, -1)::number as businessunit_key,\n        COALESCE(ddf.defendant_key, -1)::number as defendant_key,\n        COALESCE(dcl.client_key, -1)::number as client_key,\n        COALESCE(dfi.firm_key, -1)::number as firm_key,\n        p.sequenceid::number as payment_key,\n        ddp.date_key::number as payment_date_key,\n        0::number(38, 4) as invoice_amount,\n        0::number(38, 4) as sales_tax_amount,\n        0::number(38, 4) as witness_fee_amount,\n        COALESCE(p.fldpaymentamt, 0)::number(38, 4) as payment_amount,\n        p.metadata_created_at::timestamp_ntz(9) as harmonized_created_ts,\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as created_ts,\n        CURRENT_TIMESTAMP::timestamp_ntz(9) as updated_ts\n\n    -- Query joins\n    from harmonized_prod.prod_magna_agg.recordtrak_accounting_tblpayments as p\n    inner join harmonized_prod.prod_magna_agg.recordtrak_accounting_tblinvoices as i on p.fldinvoicenum = i.fldinvoicenumber\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tblmaster as m on UPPER(TRIM(i.primaryclcode)) = UPPER(TRIM(m.cl_code))\n    inner join harmonized_prod.prod_magna_agg.recordtrak_tbloffice as o on m.id_tbloffice = o.id_tbloffice\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblbill as l on UPPER(TRIM(m.cl_code)) = UPPER(TRIM(l.cl_code)) and UPPER(TRIM(m.rq_at_code)) = UPPER(TRIM(l.at_code)) and l.active = 1\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tbldefendant as d on UPPER(TRIM(i.fldatcode)) = UPPER(TRIM(d.at_code))\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblclient as c on d.id_tblclient = c.id_tblclient\n    left outer join harmonized_prod.prod_magna_agg.recordtrak_tblfirm as f on c.id_tblfirm = f.id_tblfirm\n    -- Joins to get key columns\n    inner join HARMONIZED_DEV.RECORDTRAK.dim_payments as pd on p.sequenceid = pd.payment_key\n    inner join HARMONIZED_DEV.RECORDTRAK.dim_dates as ddp on TO_DATE(p.fldpaymentdate) = ddp.full_date\n    inner join HARMONIZED_DEV.RECORDTRAK.dim_dates as ddi on TO_DATE(i.fldinvoicedate) = ddi.full_date\n    left join HARMONIZED_DEV.RECORDTRAK.dim_offices as dof on o.id_tbloffice = dof.id_tbloffice\n    left join HARMONIZED_DEV.RECORDTRAK.dim_business_units as dbu on UPPER(TRIM(l.businessunit)) = dbu.business_unit\n    left join HARMONIZED_DEV.RECORDTRAK.dim_defendants as ddf on d.id_tbldefendant = ddf.id_tbldefendant\n    left join HARMONIZED_DEV.RECORDTRAK.dim_clients as dcl on c.id_tblclient = dcl.id_tblclient\n    left join HARMONIZED_DEV.RECORDTRAK.dim_firms as dfi on f.id_tblfirm = dfi.id_tblfirm\n\n    \n        where\n            i.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments where payment_key = -1)\n            or\n            p.metadata_created_at > (select COALESCE(MAX(harmonized_created_ts), '1900-01-01') from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments where payment_key != -1)\n    \n),\n\nfinal as (\n    select * from invoices\n    union\n    select * from payments\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "snapshot.recordtrak.snapshot_dim_budgets": {"database": "HARMONIZED_DEV", "schema": "recordtrak", "name": "snapshot_dim_budgets", "resource_type": "snapshot", "package_name": "recordtrak", "path": "dim_budgets.sql", "original_file_path": "snapshots\\dim_budgets.sql", "unique_id": "snapshot.recordtrak.snapshot_dim_budgets", "fqn": ["recordtrak", "dim_budgets", "snapshot_dim_budgets"], "alias": "snapshot_dim_budgets", "checksum": {"name": "sha256", "checksum": "eb9f3064e3adbaabb8ec289cf8841af7d7c36a0fc0be3de715c13a72921bde5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "date", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "recordtrak", "target_database": null, "updated_at": null, "check_cols": ["revenue_budget"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "recordtrak", "strategy": "check", "unique_key": "date", "check_cols": ["revenue_budget"]}, "created_at": 1708553245.1920156, "relation_name": "HARMONIZED_DEV.recordtrak.snapshot_dim_budgets", "raw_code": "\r\n\r\n{{\r\n   config(\r\n       target_schema='recordtrak',\r\n       strategy='check',\r\n       unique_key='date',\r\n       check_cols=['revenue_budget']\r\n   )\r\n}}\r\n\r\nwith budgets as (\r\nselect * from {{ source('raw_data', 'dailybudgets') }}\r\n),\r\n\r\nfinal as (\r\n    select * from budgets\r\n)\r\n\r\nselect * from final\r\n", "language": "sql", "refs": [], "sources": [["raw_data", "dailybudgets"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recordtrak.raw_data.dailybudgets"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nwith budgets as (\nselect * from RAW_DEV.ISSUEGOAL.dailybudgets\n),\n\nfinal as (\n    select * from budgets\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.recordtrak.dim_goals": {"database": "HARMONIZED_DEV", "schema": "recordtrak", "name": "dim_goals", "resource_type": "snapshot", "package_name": "recordtrak", "path": "dim_goals.sql", "original_file_path": "snapshots\\dim_goals.sql", "unique_id": "snapshot.recordtrak.dim_goals", "fqn": ["recordtrak", "dim_goals", "dim_goals"], "alias": "dim_goals", "checksum": {"name": "sha256", "checksum": "51d53413fcba9d5c4af4b38e445f1c5ae4ac92783a3b79fe18416309b0caf532"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "goal_month", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "strategy": "check", "target_schema": "recordtrak", "target_database": null, "updated_at": null, "check_cols": ["issue_goal", "jobs_goal"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "recordtrak", "strategy": "check", "unique_key": "goal_month", "check_cols": ["issue_goal", "jobs_goal"]}, "created_at": 1708553245.2321932, "relation_name": "HARMONIZED_DEV.recordtrak.dim_goals", "raw_code": "\r\n\r\n{{\r\n   config(\r\n       target_schema='recordtrak',\r\n       strategy='check',\r\n       unique_key='goal_month',\r\n       check_cols=['issue_goal', 'jobs_goal']\r\n   )\r\n}}\r\n\r\nwith goals as (\r\nselect * from {{ source('raw_data', 'monthlygoals') }}\r\n),\r\n\r\nfinal as (\r\n    select *\r\n    from goals\r\n)\r\n\r\nselect * from final\r\n", "language": "sql", "refs": [], "sources": [["raw_data", "monthlygoals"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.recordtrak.raw_data.monthlygoals"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\n\n\nwith goals as (\nselect * from RAW_DEV.ISSUEGOAL.monthlygoals\n),\n\nfinal as (\n    select *\n    from goals\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"database": "HARMONIZED_DEV", "schema": "RECORDTRAK", "name": "dbt_constraints-on-run-end-0", "resource_type": "operation", "package_name": "dbt_constraints", "path": "hooks\\dbt_constraints-on-run-end-0.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "alias": "dbt_constraints-on-run-end-0", "checksum": {"name": "sha256", "checksum": "fc779aec177f37eaee5f10f97f1228947e071cca98d65876fc713dcfe84b8a89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "transient": false, "recordtrak": null}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"transient": false, "recordtrak": null}, "created_at": 1708553245.3479455, "relation_name": null, "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.recordtrak.unique_dim_business_units_business_unit_key.7bdeb8856d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "business_unit_key", "model": "{{ get_where_subquery(ref('dim_business_units')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_business_units_business_unit_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_business_units_business_unit_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_business_units_business_unit_key.7bdeb8856d", "fqn": ["recordtrak", "final", "unique_dim_business_units_business_unit_key"], "alias": "unique_dim_business_units_business_unit_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6030653, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_business_units", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_business_units"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_business_units_business_unit_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    business_unit_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_business_units\nwhere business_unit_key is not null\ngroup by business_unit_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "business_unit_key", "file_key_name": "models.dim_business_units", "attached_node": "model.recordtrak.dim_business_units"}, "test.recordtrak.dbt_constraints_primary_key_dim_business_units_business_unit_key.1e0870e9e4": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "business_unit_key", "model": "{{ get_where_subquery(ref('dim_business_units')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_business_units_business_unit_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_business_units_business_unit_key.1e0870e9e4", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_business_units_business_unit_key"], "alias": "dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8"}, "created_at": 1708553245.6050608, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8\") }}", "language": "sql", "refs": [{"name": "dim_business_units", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_business_units"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_di_d09c8f5d2bb64b2b7c57befe655240a8.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        business_unit_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_business_units\n    group by business_unit_key\n    having count(*) > 1\n        or business_unit_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_business_units", "attached_node": "model.recordtrak.dim_business_units"}, "test.recordtrak.unique_dim_clients_client_key.a856337432": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "client_key", "model": "{{ get_where_subquery(ref('dim_clients')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_clients_client_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_clients_client_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_clients_client_key.a856337432", "fqn": ["recordtrak", "final", "unique_dim_clients_client_key"], "alias": "unique_dim_clients_client_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6230292, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clients", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_clients"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_clients_client_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    client_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_clients\nwhere client_key is not null\ngroup by client_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_key", "file_key_name": "models.dim_clients", "attached_node": "model.recordtrak.dim_clients"}, "test.recordtrak.dbt_constraints_primary_key_dim_clients_client_key.85ba7be504": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "client_key", "model": "{{ get_where_subquery(ref('dim_clients')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_clients_client_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_clients_client_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_clients_client_key.85ba7be504", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_clients_client_key"], "alias": "dbt_constraints_primary_key_dim_clients_client_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.625029, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_clients", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_clients"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_clients_client_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        client_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_clients\n    group by client_key\n    having count(*) > 1\n        or client_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_clients", "attached_node": "model.recordtrak.dim_clients"}, "test.recordtrak.unique_dim_dates_date_key.61e1d0726d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_dates')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_dates_date_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_dates_date_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_dates_date_key.61e1d0726d", "fqn": ["recordtrak", "final", "unique_dim_dates_date_key"], "alias": "unique_dim_dates_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6301005, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_dates"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_dates_date_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_dates\nwhere date_key is not null\ngroup by date_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date_key", "file_key_name": "models.dim_dates", "attached_node": "model.recordtrak.dim_dates"}, "test.recordtrak.dbt_constraints_primary_key_dim_dates_date_key.717b874c38": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "date_key", "model": "{{ get_where_subquery(ref('dim_dates')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_dates_date_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_dates_date_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_dates_date_key.717b874c38", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_dates_date_key"], "alias": "dbt_constraints_primary_key_dim_dates_date_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.632069, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_dates"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_dates_date_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        date_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_dates\n    group by date_key\n    having count(*) > 1\n        or date_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_dates", "attached_node": "model.recordtrak.dim_dates"}, "test.recordtrak.unique_dim_defendants_defendant_key.31a2304a21": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "defendant_key", "model": "{{ get_where_subquery(ref('dim_defendants')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_defendants_defendant_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_defendants_defendant_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_defendants_defendant_key.31a2304a21", "fqn": ["recordtrak", "final", "unique_dim_defendants_defendant_key"], "alias": "unique_dim_defendants_defendant_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6370661, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_defendants", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_defendants"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_defendants_defendant_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    defendant_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_defendants\nwhere defendant_key is not null\ngroup by defendant_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "defendant_key", "file_key_name": "models.dim_defendants", "attached_node": "model.recordtrak.dim_defendants"}, "test.recordtrak.dbt_constraints_primary_key_dim_defendants_defendant_key.4c24f5aa4e": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "defendant_key", "model": "{{ get_where_subquery(ref('dim_defendants')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_defendants_defendant_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_defendants_defendant_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_defendants_defendant_key.4c24f5aa4e", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_defendants_defendant_key"], "alias": "dbt_constraints_primary_key_dim_defendants_defendant_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6390784, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_defendants", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_defendants"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_defendants_defendant_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        defendant_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_defendants\n    group by defendant_key\n    having count(*) > 1\n        or defendant_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_defendants", "attached_node": "model.recordtrak.dim_defendants"}, "test.recordtrak.unique_dim_firms_firm_key.ac725069f3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "firm_key", "model": "{{ get_where_subquery(ref('dim_firms')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_firms_firm_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_firms_firm_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_firms_firm_key.ac725069f3", "fqn": ["recordtrak", "final", "unique_dim_firms_firm_key"], "alias": "unique_dim_firms_firm_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.644071, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_firms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_firms"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_firms_firm_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    firm_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_firms\nwhere firm_key is not null\ngroup by firm_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "firm_key", "file_key_name": "models.dim_firms", "attached_node": "model.recordtrak.dim_firms"}, "test.recordtrak.dbt_constraints_primary_key_dim_firms_firm_key.8268286281": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "firm_key", "model": "{{ get_where_subquery(ref('dim_firms')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_firms_firm_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_firms_firm_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_firms_firm_key.8268286281", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_firms_firm_key"], "alias": "dbt_constraints_primary_key_dim_firms_firm_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6460724, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_firms", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_firms"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_firms_firm_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        firm_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_firms\n    group by firm_key\n    having count(*) > 1\n        or firm_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_firms", "attached_node": "model.recordtrak.dim_firms"}, "test.recordtrak.unique_dim_hold_requests_hold_request_key.1a96257ea3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "hold_request_key", "model": "{{ get_where_subquery(ref('dim_hold_requests')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_hold_requests_hold_request_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_hold_requests_hold_request_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_hold_requests_hold_request_key.1a96257ea3", "fqn": ["recordtrak", "final", "unique_dim_hold_requests_hold_request_key"], "alias": "unique_dim_hold_requests_hold_request_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6500711, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_hold_requests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_hold_requests"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_hold_requests_hold_request_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    hold_request_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_hold_requests\nwhere hold_request_key is not null\ngroup by hold_request_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hold_request_key", "file_key_name": "models.dim_hold_requests", "attached_node": "model.recordtrak.dim_hold_requests"}, "test.recordtrak.dbt_constraints_primary_key_dim_hold_requests_hold_request_key.864cc79869": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "hold_request_key", "model": "{{ get_where_subquery(ref('dim_hold_requests')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_hold_requests_hold_request_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_hold_requests_hold_request_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_hold_requests_hold_request_key.864cc79869", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_hold_requests_hold_request_key"], "alias": "dbt_constraints_primary_key_dim_hold_requests_hold_request_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6520703, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_hold_requests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_hold_requests"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_hold_requests_hold_request_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        hold_request_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_hold_requests\n    group by hold_request_key\n    having count(*) > 1\n        or hold_request_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_hold_requests", "attached_node": "model.recordtrak.dim_hold_requests"}, "test.recordtrak.unique_dim_invoices_invoice_key.b6406477d5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_key", "model": "{{ get_where_subquery(ref('dim_invoices')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_invoices_invoice_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_invoices_invoice_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_invoices_invoice_key.b6406477d5", "fqn": ["recordtrak", "final", "unique_dim_invoices_invoice_key"], "alias": "unique_dim_invoices_invoice_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6560705, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_invoices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_invoices_invoice_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_invoices\nwhere invoice_key is not null\ngroup by invoice_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_key", "file_key_name": "models.dim_invoices", "attached_node": "model.recordtrak.dim_invoices"}, "test.recordtrak.dbt_constraints_primary_key_dim_invoices_invoice_key.19705b4d96": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "invoice_key", "model": "{{ get_where_subquery(ref('dim_invoices')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_invoices_invoice_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_invoices_invoice_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_invoices_invoice_key.19705b4d96", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_invoices_invoice_key"], "alias": "dbt_constraints_primary_key_dim_invoices_invoice_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6582482, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_invoices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_invoices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_invoices_invoice_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        invoice_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_invoices\n    group by invoice_key\n    having count(*) > 1\n        or invoice_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_invoices", "attached_node": "model.recordtrak.dim_invoices"}, "test.recordtrak.unique_dim_litigation_cases_litigation_case_key.605f0a72e2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "litigation_case_key", "model": "{{ get_where_subquery(ref('dim_litigation_cases')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_litigation_cases_litigation_case_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_litigation_cases_litigation_case_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_litigation_cases_litigation_case_key.605f0a72e2", "fqn": ["recordtrak", "final", "unique_dim_litigation_cases_litigation_case_key"], "alias": "unique_dim_litigation_cases_litigation_case_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.663069, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_litigation_cases", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_litigation_cases"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_litigation_cases_litigation_case_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    litigation_case_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases\nwhere litigation_case_key is not null\ngroup by litigation_case_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "litigation_case_key", "file_key_name": "models.dim_litigation_cases", "attached_node": "model.recordtrak.dim_litigation_cases"}, "test.recordtrak.dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key.a5bfce6d6b": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "litigation_case_key", "model": "{{ get_where_subquery(ref('dim_litigation_cases')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key.a5bfce6d6b", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key"], "alias": "dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b"}, "created_at": 1708553245.6650689, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b\") }}", "language": "sql", "refs": [{"name": "dim_litigation_cases", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_litigation_cases"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_di_ecfdd1ed7e8d122b902da1bc8828f93b.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        litigation_case_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_litigation_cases\n    group by litigation_case_key\n    having count(*) > 1\n        or litigation_case_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_litigation_cases", "attached_node": "model.recordtrak.dim_litigation_cases"}, "test.recordtrak.unique_dim_masters_master_key.27a78d86f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "master_key", "model": "{{ get_where_subquery(ref('dim_masters')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_masters_master_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_masters_master_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_masters_master_key.27a78d86f0", "fqn": ["recordtrak", "final", "unique_dim_masters_master_key"], "alias": "unique_dim_masters_master_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6700654, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_masters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_masters"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_masters_master_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    master_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_masters\nwhere master_key is not null\ngroup by master_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "master_key", "file_key_name": "models.dim_masters", "attached_node": "model.recordtrak.dim_masters"}, "test.recordtrak.dbt_constraints_primary_key_dim_masters_master_key.7be8a249f4": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "master_key", "model": "{{ get_where_subquery(ref('dim_masters')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_masters_master_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_masters_master_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_masters_master_key.7be8a249f4", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_masters_master_key"], "alias": "dbt_constraints_primary_key_dim_masters_master_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.672072, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_masters", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_masters"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_masters_master_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        master_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_masters\n    group by master_key\n    having count(*) > 1\n        or master_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_masters", "attached_node": "model.recordtrak.dim_masters"}, "test.recordtrak.unique_dim_offices_office_key.33f0e00096": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "office_key", "model": "{{ get_where_subquery(ref('dim_offices')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_offices_office_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_offices_office_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_offices_office_key.33f0e00096", "fqn": ["recordtrak", "final", "unique_dim_offices_office_key"], "alias": "unique_dim_offices_office_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6770291, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_offices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_offices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_offices_office_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    office_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_offices\nwhere office_key is not null\ngroup by office_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "office_key", "file_key_name": "models.dim_offices", "attached_node": "model.recordtrak.dim_offices"}, "test.recordtrak.dbt_constraints_primary_key_dim_offices_office_key.27773ff184": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "office_key", "model": "{{ get_where_subquery(ref('dim_offices')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_offices_office_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_offices_office_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_offices_office_key.27773ff184", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_offices_office_key"], "alias": "dbt_constraints_primary_key_dim_offices_office_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6790245, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_offices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_offices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_offices_office_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        office_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_offices\n    group by office_key\n    having count(*) > 1\n        or office_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_offices", "attached_node": "model.recordtrak.dim_offices"}, "test.recordtrak.unique_dim_payments_payment_key.97ee26d5a5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_key", "model": "{{ get_where_subquery(ref('dim_payments')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_payments_payment_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_payments_payment_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_payments_payment_key.97ee26d5a5", "fqn": ["recordtrak", "final", "unique_dim_payments_payment_key"], "alias": "unique_dim_payments_payment_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6840656, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_payments_payment_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_payments\nwhere payment_key is not null\ngroup by payment_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_key", "file_key_name": "models.dim_payments", "attached_node": "model.recordtrak.dim_payments"}, "test.recordtrak.dbt_constraints_primary_key_dim_payments_payment_key.df6982c052": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "payment_key", "model": "{{ get_where_subquery(ref('dim_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_payments_payment_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_payments_payment_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_payments_payment_key.df6982c052", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_payments_payment_key"], "alias": "dbt_constraints_primary_key_dim_payments_payment_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6860647, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_payments_payment_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        payment_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_payments\n    group by payment_key\n    having count(*) > 1\n        or payment_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_payments", "attached_node": "model.recordtrak.dim_payments"}, "test.recordtrak.unique_dim_qc_jobs_queues_qc_jobs_queue_key.f50ad524cf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "qc_jobs_queue_key", "model": "{{ get_where_subquery(ref('dim_qc_jobs_queues')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_qc_jobs_queues_qc_jobs_queue_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_qc_jobs_queues_qc_jobs_queue_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_qc_jobs_queues_qc_jobs_queue_key.f50ad524cf", "fqn": ["recordtrak", "final", "unique_dim_qc_jobs_queues_qc_jobs_queue_key"], "alias": "unique_dim_qc_jobs_queues_qc_jobs_queue_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6911795, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_qc_jobs_queues", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_qc_jobs_queues"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_qc_jobs_queues_qc_jobs_queue_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    qc_jobs_queue_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues\nwhere qc_jobs_queue_key is not null\ngroup by qc_jobs_queue_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "qc_jobs_queue_key", "file_key_name": "models.dim_qc_jobs_queues", "attached_node": "model.recordtrak.dim_qc_jobs_queues"}, "test.recordtrak.dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key.e4581770f7": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "qc_jobs_queue_key", "model": "{{ get_where_subquery(ref('dim_qc_jobs_queues')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key.e4581770f7", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key"], "alias": "dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d"}, "created_at": 1708553245.6932168, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d\") }}", "language": "sql", "refs": [{"name": "dim_qc_jobs_queues", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_qc_jobs_queues"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_di_245f30fec83621cddb2efc96fa93a57d.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        qc_jobs_queue_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_qc_jobs_queues\n    group by qc_jobs_queue_key\n    having count(*) > 1\n        or qc_jobs_queue_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_qc_jobs_queues", "attached_node": "model.recordtrak.dim_qc_jobs_queues"}, "test.recordtrak.unique_dim_requests_request_key.be885ee3b4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "request_key", "model": "{{ get_where_subquery(ref('dim_requests')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_requests_request_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_requests_request_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_requests_request_key.be885ee3b4", "fqn": ["recordtrak", "final", "unique_dim_requests_request_key"], "alias": "unique_dim_requests_request_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.6982167, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_requests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_requests"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_requests_request_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    request_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_requests\nwhere request_key is not null\ngroup by request_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "request_key", "file_key_name": "models.dim_requests", "attached_node": "model.recordtrak.dim_requests"}, "test.recordtrak.dbt_constraints_primary_key_dim_requests_request_key.75f9f0e52d": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "request_key", "model": "{{ get_where_subquery(ref('dim_requests')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_requests_request_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_requests_request_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_requests_request_key.75f9f0e52d", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_requests_request_key"], "alias": "dbt_constraints_primary_key_dim_requests_request_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.700363, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_requests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_requests"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_requests_request_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        request_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_requests\n    group by request_key\n    having count(*) > 1\n        or request_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_requests", "attached_node": "model.recordtrak.dim_requests"}, "test.recordtrak.unique_dim_stc_queues_stc_queue_key.6002a1ec1b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "stc_queue_key", "model": "{{ get_where_subquery(ref('dim_stc_queues')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_stc_queues_stc_queue_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_stc_queues_stc_queue_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_stc_queues_stc_queue_key.6002a1ec1b", "fqn": ["recordtrak", "final", "unique_dim_stc_queues_stc_queue_key"], "alias": "unique_dim_stc_queues_stc_queue_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.705218, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_stc_queues", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_stc_queues"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_stc_queues_stc_queue_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    stc_queue_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_stc_queues\nwhere stc_queue_key is not null\ngroup by stc_queue_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "stc_queue_key", "file_key_name": "models.dim_stc_queues", "attached_node": "model.recordtrak.dim_stc_queues"}, "test.recordtrak.dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.c4f62c9a07": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "stc_queue_key", "model": "{{ get_where_subquery(ref('dim_stc_queues')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_stc_queues_stc_queue_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.c4f62c9a07", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_stc_queues_stc_queue_key"], "alias": "dbt_constraints_primary_key_dim_stc_queues_stc_queue_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.7073421, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_stc_queues", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_stc_queues"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        stc_queue_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_stc_queues\n    group by stc_queue_key\n    having count(*) > 1\n        or stc_queue_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_stc_queues", "attached_node": "model.recordtrak.dim_stc_queues"}, "test.recordtrak.unique_dim_tag_items_tag_item_key.133d0cc4f4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tag_item_key", "model": "{{ get_where_subquery(ref('dim_tag_items')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_tag_items_tag_item_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_tag_items_tag_item_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_tag_items_tag_item_key.133d0cc4f4", "fqn": ["recordtrak", "final", "unique_dim_tag_items_tag_item_key"], "alias": "unique_dim_tag_items_tag_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.7118826, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_tag_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_tag_items"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_tag_items_tag_item_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    tag_item_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_tag_items\nwhere tag_item_key is not null\ngroup by tag_item_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tag_item_key", "file_key_name": "models.dim_tag_items", "attached_node": "model.recordtrak.dim_tag_items"}, "test.recordtrak.dbt_constraints_primary_key_dim_tag_items_tag_item_key.0ff9b0b569": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "tag_item_key", "model": "{{ get_where_subquery(ref('dim_tag_items')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_tag_items_tag_item_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_tag_items_tag_item_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_tag_items_tag_item_key.0ff9b0b569", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_tag_items_tag_item_key"], "alias": "dbt_constraints_primary_key_dim_tag_items_tag_item_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.713882, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_tag_items", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_tag_items"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_tag_items_tag_item_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        tag_item_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_tag_items\n    group by tag_item_key\n    having count(*) > 1\n        or tag_item_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_tag_items", "attached_node": "model.recordtrak.dim_tag_items"}, "test.recordtrak.unique_dim_timesheets_timesheet_key.2b7df327cb": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "timesheet_key", "model": "{{ get_where_subquery(ref('dim_timesheets')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "unique_dim_timesheets_timesheet_key", "resource_type": "test", "package_name": "recordtrak", "path": "unique_dim_timesheets_timesheet_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.unique_dim_timesheets_timesheet_key.2b7df327cb", "fqn": ["recordtrak", "final", "unique_dim_timesheets_timesheet_key"], "alias": "unique_dim_timesheets_timesheet_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.7188866, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_timesheets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_timesheets"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\unique_dim_timesheets_timesheet_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    timesheet_key as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_DEV.RECORDTRAK.dim_timesheets\nwhere timesheet_key is not null\ngroup by timesheet_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "timesheet_key", "file_key_name": "models.dim_timesheets", "attached_node": "model.recordtrak.dim_timesheets"}, "test.recordtrak.dbt_constraints_primary_key_dim_timesheets_timesheet_key.e5c151506e": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "timesheet_key", "model": "{{ get_where_subquery(ref('dim_timesheets')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_dim_timesheets_timesheet_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_dim_timesheets_timesheet_key.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_dim_timesheets_timesheet_key.e5c151506e", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_dim_timesheets_timesheet_key"], "alias": "dbt_constraints_primary_key_dim_timesheets_timesheet_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.72089, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_timesheets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_timesheets"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_dim_timesheets_timesheet_key.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        timesheet_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.dim_timesheets\n    group by timesheet_key\n    having count(*) > 1\n        or timesheet_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.dim_timesheets", "attached_node": "model.recordtrak.dim_timesheets"}, "test.recordtrak.dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key.76a976fee8": {"test_metadata": {"name": "primary_key", "kwargs": {"column_name": "invoice_payment_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key.76a976fee8", "fqn": ["recordtrak", "final", "dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key"], "alias": "dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c"}, "created_at": 1708553245.7258444, "relation_name": null, "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c\") }}", "language": "sql", "refs": [{"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_primary_key_fa_359000dde0b00566ceec2598d16d840c.sql", "compiled": true, "compiled_code": "with validation_errors as (\n    select\n        invoice_payment_key, count(*) as row_count\n    from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n    group by invoice_payment_key\n    having count(*) > 1\n        or invoice_payment_key is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_payment_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_invoices')", "pk_column_name": "invoice_key", "column_name": "invoice_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_"], "alias": "dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b"}, "created_at": 1708553245.7312632, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b\") }}", "language": "sql", "refs": [{"name": "dim_invoices", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_invoices", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_3d35017ff003fb52f3d37c702130337b.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    invoice_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and invoice_key is not null\n        \n),\n\nparent as (\n    select\n        invoice_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_invoices\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.invoice_key = child.invoice_key\n\n    where parent.invoice_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_dates')", "pk_column_name": "date_key", "column_name": "invoice_date_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_"], "alias": "dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4"}, "created_at": 1708553245.7448866, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4\") }}", "language": "sql", "refs": [{"name": "dim_dates", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_dates", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_529a4e02009444b5affff075a5c6fbb4.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    invoice_date_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and invoice_date_key is not null\n        \n),\n\nparent as (\n    select\n        date_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_dates\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.date_key = child.invoice_date_key\n\n    where parent.date_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_date_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_masters')", "pk_column_name": "master_key", "column_name": "master_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_"], "alias": "dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7"}, "created_at": 1708553245.751453, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7\") }}", "language": "sql", "refs": [{"name": "dim_masters", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_masters", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_250245f4c5c90fd1f599abb4b4ae6fa7.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    master_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and master_key is not null\n        \n),\n\nparent as (\n    select\n        master_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_masters\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.master_key = child.master_key\n\n    where parent.master_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "master_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_offices')", "pk_column_name": "office_key", "column_name": "office_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_"], "alias": "dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8"}, "created_at": 1708553245.7574866, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8\") }}", "language": "sql", "refs": [{"name": "dim_offices", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_offices", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_245e21695bfa892bfd7d8e76b50446f8.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    office_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and office_key is not null\n        \n),\n\nparent as (\n    select\n        office_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_offices\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.office_key = child.office_key\n\n    where parent.office_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "office_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_business_units')", "pk_column_name": "business_unit_key", "column_name": "business_unit_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_"], "alias": "dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8"}, "created_at": 1708553245.762637, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8\") }}", "language": "sql", "refs": [{"name": "dim_business_units", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_business_units", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_4920e3fc5004448ae5e51de4115719d8.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    business_unit_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and business_unit_key is not null\n        \n),\n\nparent as (\n    select\n        business_unit_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_business_units\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.business_unit_key = child.business_unit_key\n\n    where parent.business_unit_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "business_unit_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_defendants')", "pk_column_name": "defendant_key", "column_name": "defendant_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_"], "alias": "dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868"}, "created_at": 1708553245.768493, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868\") }}", "language": "sql", "refs": [{"name": "dim_defendants", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_defendants", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_faf9411fc0cb6466651f8c39374a4868.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    defendant_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and defendant_key is not null\n        \n),\n\nparent as (\n    select\n        defendant_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_defendants\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.defendant_key = child.defendant_key\n\n    where parent.defendant_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "defendant_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_clients')", "pk_column_name": "client_key", "column_name": "client_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_"], "alias": "dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556"}, "created_at": 1708553245.7744875, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556\") }}", "language": "sql", "refs": [{"name": "dim_clients", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_clients", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_105a0c44ce240ada56f44d332ad57556.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    client_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and client_key is not null\n        \n),\n\nparent as (\n    select\n        client_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_clients\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.client_key = child.client_key\n\n    where parent.client_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "client_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_firms')", "pk_column_name": "firm_key", "column_name": "firm_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_"], "alias": "dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10"}, "created_at": 1708553245.779487, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10\") }}", "language": "sql", "refs": [{"name": "dim_firms", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_firms", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_35456f0d2a2af845b1c7260c3b4c7f10.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    firm_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and firm_key is not null\n        \n),\n\nparent as (\n    select\n        firm_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_firms\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.firm_key = child.firm_key\n\n    where parent.firm_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "firm_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_payments')", "pk_column_name": "payment_key", "column_name": "payment_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_"], "alias": "dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6"}, "created_at": 1708553245.7855084, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6\") }}", "language": "sql", "refs": [{"name": "dim_payments", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_payments", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_57000121452fbc381cd7cc355f3087f6.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    payment_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and payment_key is not null\n        \n),\n\nparent as (\n    select\n        payment_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_payments\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.payment_key = child.payment_key\n\n    where parent.payment_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8": {"test_metadata": {"name": "foreign_key", "kwargs": {"pk_table_name": "ref('dim_dates')", "pk_column_name": "date_key", "column_name": "payment_date_key", "model": "{{ get_where_subquery(ref('fact_invoices_payments')) }}"}, "namespace": "dbt_constraints"}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_", "resource_type": "test", "package_name": "recordtrak", "path": "dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8", "fqn": ["recordtrak", "final", "dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_"], "alias": "dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c"}, "created_at": 1708553245.7916942, "relation_name": null, "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c\") }}", "language": "sql", "refs": [{"name": "dim_dates", "package": null, "version": null}, {"name": "fact_invoices_payments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.recordtrak.dim_dates", "model.recordtrak.fact_invoices_payments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\dbt_constraints_foreign_key_fa_31f1f98bf48c1d8f61682154fa56737c.sql", "compiled": true, "compiled_code": "\nwith child as (\n  select\n    payment_date_key\n  from HARMONIZED_DEV.RECORDTRAK.fact_invoices_payments\n  where 1=1\n        and payment_date_key is not null\n        \n),\n\nparent as (\n    select\n        date_key\n    from HARMONIZED_DEV.RECORDTRAK.dim_dates\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.date_key = child.payment_date_key\n\n    where parent.date_key is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_date_key", "file_key_name": "models.fact_invoices_payments", "attached_node": "model.recordtrak.fact_invoices_payments"}, "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid.00d07453f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_accounting_tblinvoices')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid.00d07453f0", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid"], "alias": "source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0"}, "created_at": 1708553245.9850612, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0\") }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_accounting_tblinvoices"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recor_7cb3262ee624412c2b3160d82e4421c0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblinvoices\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid.260ceac882": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_accounting_tblpayments')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid.260ceac882", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid"], "alias": "source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6"}, "created_at": 1708553245.9899368, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6\") }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_accounting_tblpayments"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_accounting_tblpayments"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recor_cc7a3c4e42bbb72b0336f920220e85c6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblpayments\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblclient_id_tblclient.dc2071cced": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_tblclient", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblclient')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblclient_id_tblclient", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblclient_id_tblclient.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblclient_id_tblclient.dc2071cced", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblclient_id_tblclient"], "alias": "source_unique_recordtrak_recordtrak_tblclient_id_tblclient", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.99298, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblclient"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblclient"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblclient_id_tblclient.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_tblclient as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblclient\nwhere id_tblclient is not null\ngroup by id_tblclient\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_tblclient", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant.6c49ba8102": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_tbldefendant", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tbldefendant')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant.6c49ba8102", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant"], "alias": "source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb"}, "created_at": 1708553245.994982, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb\") }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbldefendant"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbldefendant"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recor_e34aa087bd85b90d74849895debc9ffb.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_tbldefendant as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbldefendant\nwhere id_tbldefendant is not null\ngroup by id_tbldefendant\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_tbldefendant", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.f8f6da3c35": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_tblfirm", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblfirm')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.f8f6da3c35", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm"], "alias": "source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.997983, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblfirm"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblfirm"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_tblfirm as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblfirm\nwhere id_tblfirm is not null\ngroup by id_tblfirm\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_tblfirm", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.4e3ead5b63": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblholdreq')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblholdreq_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.4e3ead5b63", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblholdreq_sequenceid"], "alias": "source_unique_recordtrak_recordtrak_tblholdreq_sequenceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553245.9999804, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblholdreq"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblholdreq"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblholdreq\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.0e0efcc252": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tbllitcase')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tbllitcase_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.0e0efcc252", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tbllitcase_sequenceid"], "alias": "source_unique_recordtrak_recordtrak_tbllitcase_sequenceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0019808, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbllitcase"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbllitcase"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbllitcase\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.0fa5ba92cf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_tblmaster", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblmaster')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.0fa5ba92cf", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster"], "alias": "source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0051343, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblmaster"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblmaster"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_tblmaster as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblmaster\nwhere id_tblmaster is not null\ngroup by id_tblmaster\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_tblmaster", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.d6c9b0a120": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_tbloffice", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tbloffice')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.d6c9b0a120", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice"], "alias": "source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0069847, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbloffice"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbloffice"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_tbloffice as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbloffice\nwhere id_tbloffice is not null\ngroup by id_tbloffice\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_tbloffice", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.357fc777e1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "qc_sequence", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblqcjobsqueue')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.357fc777e1", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence"], "alias": "source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0089898, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblqcjobsqueue"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    qc_sequence as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblqcjobsqueue\nwhere qc_sequence is not null\ngroup by qc_sequence\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "qc_sequence", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblrequest_sequenceid.0d6a1bc3bf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblrequest')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblrequest_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblrequest_sequenceid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblrequest_sequenceid.0d6a1bc3bf", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblrequest_sequenceid"], "alias": "source_unique_recordtrak_recordtrak_tblrequest_sequenceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0109901, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblrequest"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblrequest"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblrequest_sequenceid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblrequest\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.5b14bdb7ed": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tblstcqueue')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.5b14bdb7ed", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid"], "alias": "source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0129836, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tblstcqueue"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tblstcqueue"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblstcqueue\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tbltagitem_nid.6996640826": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "nid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tbltagitem')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tbltagitem_nid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tbltagitem_nid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tbltagitem_nid.6996640826", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tbltagitem_nid"], "alias": "source_unique_recordtrak_recordtrak_tbltagitem_nid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0149834, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbltagitem"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbltagitem"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tbltagitem_nid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    nid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltagitem\nwhere nid is not null\ngroup by nid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.d70fcea39e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sequenceid", "model": "{{ get_where_subquery(source('recordtrak', 'recordtrak_tbltimesheet')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.sql", "original_file_path": "models\\final\\schema.yml", "unique_id": "test.recordtrak.source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.d70fcea39e", "fqn": ["recordtrak", "final", "source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid"], "alias": "source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0169868, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["recordtrak", "recordtrak_tbltimesheet"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.recordtrak.recordtrak_tbltimesheet"]}, "compiled_path": "target\\compiled\\recordtrak\\models\\final\\schema.yml\\source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sequenceid as unique_field,\n    count(*) as n_records\n\nfrom HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltimesheet\nwhere sequenceid is not null\ngroup by sequenceid\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sequenceid", "file_key_name": "sources.recordtrak", "attached_node": null}, "test.recordtrak.source_unique_raw_data_monthlygoals_goal_month.ed2269a89b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "goal_month", "model": "{{ get_where_subquery(source('raw_data', 'monthlygoals')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_raw_data_monthlygoals_goal_month", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_raw_data_monthlygoals_goal_month.sql", "original_file_path": "snapshots\\schema.yml", "unique_id": "test.recordtrak.source_unique_raw_data_monthlygoals_goal_month.ed2269a89b", "fqn": ["recordtrak", "source_unique_raw_data_monthlygoals_goal_month"], "alias": "source_unique_raw_data_monthlygoals_goal_month", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0189838, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "monthlygoals"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.raw_data.monthlygoals"]}, "compiled_path": "target\\compiled\\recordtrak\\snapshots\\schema.yml\\source_unique_raw_data_monthlygoals_goal_month.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    goal_month as unique_field,\n    count(*) as n_records\n\nfrom RAW_DEV.ISSUEGOAL.monthlygoals\nwhere goal_month is not null\ngroup by goal_month\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "goal_month", "file_key_name": "sources.raw_data", "attached_node": null}, "test.recordtrak.source_unique_raw_data_dailybudgets_date.8a53dcbe3c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(source('raw_data', 'dailybudgets')) }}"}, "namespace": null}, "database": "HARMONIZED_DEV", "schema": "RECORDTRAK_dbt_test__audit", "name": "source_unique_raw_data_dailybudgets_date", "resource_type": "test", "package_name": "recordtrak", "path": "source_unique_raw_data_dailybudgets_date.sql", "original_file_path": "snapshots\\schema.yml", "unique_id": "test.recordtrak.source_unique_raw_data_dailybudgets_date.8a53dcbe3c", "fqn": ["recordtrak", "source_unique_raw_data_dailybudgets_date"], "alias": "source_unique_raw_data_dailybudgets_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1708553246.0211284, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["raw_data", "dailybudgets"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["source.recordtrak.raw_data.dailybudgets"]}, "compiled_path": "target\\compiled\\recordtrak\\snapshots\\schema.yml\\source_unique_raw_data_dailybudgets_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom RAW_DEV.ISSUEGOAL.dailybudgets\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "date", "file_key_name": "sources.raw_data", "attached_node": null}}, "sources": {"source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_accounting_tblinvoices", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_accounting_tblinvoices"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_accounting_tblinvoices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain invoices specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblinvoices", "created_at": 1708553245.9890618}, "source.recordtrak.recordtrak.recordtrak_accounting_tblpayments": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_accounting_tblpayments", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_accounting_tblpayments", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_accounting_tblpayments"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_accounting_tblpayments", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain payment specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_accounting_tblpayments", "created_at": 1708553245.9919474}, "source.recordtrak.recordtrak.recordtrak_tblbill": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblbill", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblbill", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblbill"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblbill", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contains bill related data.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblbill", "created_at": 1708553245.9919474}, "source.recordtrak.recordtrak.recordtrak_tblclient": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblclient", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblclient", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblclient"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblclient", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain client specific details.", "columns": {"id_tblclient": {"name": "id_tblclient", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblclient", "created_at": 1708553245.993981}, "source.recordtrak.recordtrak.recordtrak_tbldefendant": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tbldefendant", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tbldefendant", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tbldefendant"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tbldefendant", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain defendant specific details.", "columns": {"id_tbldefendant": {"name": "id_tbldefendant", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbldefendant", "created_at": 1708553245.9969811}, "source.recordtrak.recordtrak.recordtrak_tblfirm": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblfirm", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblfirm", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblfirm"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblfirm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain firm specific details.", "columns": {"id_tblfirm": {"name": "id_tblfirm", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblfirm", "created_at": 1708553245.9989812}, "source.recordtrak.recordtrak.recordtrak_tblholdreq": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblholdreq", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblholdreq", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblholdreq"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblholdreq", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain hold requests specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblholdreq", "created_at": 1708553246.000983}, "source.recordtrak.recordtrak.recordtrak_tbllitcase": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tbllitcase", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tbllitcase", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tbllitcase"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tbllitcase", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain litigation cases specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbllitcase", "created_at": 1708553246.0039852}, "source.recordtrak.recordtrak.recordtrak_tblmaster": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblmaster", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblmaster", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblmaster"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblmaster", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain master specific details.", "columns": {"id_tblmaster": {"name": "id_tblmaster", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblmaster", "created_at": 1708553246.0059907}, "source.recordtrak.recordtrak.recordtrak_tbloffice": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tbloffice", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tbloffice", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tbloffice"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tbloffice", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain office specific details.", "columns": {"id_tbloffice": {"name": "id_tbloffice", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbloffice", "created_at": 1708553246.0079882}, "source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblqcjobsqueue", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblqcjobsqueue"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblqcjobsqueue", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain QC jobs queue specific details.", "columns": {"qc_sequence": {"name": "qc_sequence", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblqcjobsqueue", "created_at": 1708553246.00999}, "source.recordtrak.recordtrak.recordtrak_tblrequest": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblrequest", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblrequest", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblrequest"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblrequest", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain requests specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblrequest", "created_at": 1708553246.0119963}, "source.recordtrak.recordtrak.recordtrak_tblstcqueue": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tblstcqueue", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tblstcqueue", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tblstcqueue"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tblstcqueue", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain STC queue specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tblstcqueue", "created_at": 1708553246.013986}, "source.recordtrak.recordtrak.recordtrak_tbltagitem": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tbltagitem", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tbltagitem", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tbltagitem"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tbltagitem", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain tag item specific details.", "columns": {"nid": {"name": "nid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltagitem", "created_at": 1708553246.015986}, "source.recordtrak.recordtrak.recordtrak_tbltimesheet": {"database": "HARMONIZED_PROD", "schema": "PROD_MAGNA_AGG", "name": "recordtrak_tbltimesheet", "resource_type": "source", "package_name": "recordtrak", "path": "models\\final\\schema.yml", "original_file_path": "models\\final\\schema.yml", "unique_id": "source.recordtrak.recordtrak.recordtrak_tbltimesheet", "fqn": ["recordtrak", "final", "recordtrak", "recordtrak_tbltimesheet"], "source_name": "recordtrak", "source_description": "Harmonized data replicated from RECORDTRAK SQL server database.", "loader": "", "identifier": "recordtrak_tbltimesheet", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain timesheet specific details.", "columns": {"sequenceid": {"name": "sequenceid", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HARMONIZED_PROD.PROD_MAGNA_AGG.recordtrak_tbltimesheet", "created_at": 1708553246.0179832}, "source.recordtrak.raw_data.monthlygoals": {"database": "RAW_DEV", "schema": "ISSUEGOAL", "name": "monthlygoals", "resource_type": "source", "package_name": "recordtrak", "path": "snapshots\\schema.yml", "original_file_path": "snapshots\\schema.yml", "unique_id": "source.recordtrak.raw_data.monthlygoals", "fqn": ["recordtrak", "raw_data", "monthlygoals"], "source_name": "raw_data", "source_description": "Raw data for goals and budgets", "loader": "", "identifier": "monthlygoals", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain raw data for monthly goals.", "columns": {"goal_month": {"name": "goal_month", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RAW_DEV.ISSUEGOAL.monthlygoals", "created_at": 1708553246.0199838}, "source.recordtrak.raw_data.dailybudgets": {"database": "RAW_DEV", "schema": "ISSUEGOAL", "name": "dailybudgets", "resource_type": "source", "package_name": "recordtrak", "path": "snapshots\\schema.yml", "original_file_path": "snapshots\\schema.yml", "unique_id": "source.recordtrak.raw_data.dailybudgets", "fqn": ["recordtrak", "raw_data", "dailybudgets"], "source_name": "raw_data", "source_description": "Raw data for goals and budgets", "loader": "", "identifier": "dailybudgets", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The table contain raw data for daily budgets.", "columns": {"date": {"name": "date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RAW_DEV.ISSUEGOAL.dailybudgets", "created_at": 1708553246.0229452}}, "macros": {"macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.920125, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.921126, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9221258, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9241247, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9261243, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9271326, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.92814, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.92814, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9293382, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.929843, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9308507, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9311585, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.93185, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.93185, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9328504, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9338498, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9348495, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9348495, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9358497, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9358497, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9398491, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9408498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        coalesce(table_type, 'DYNAMIC TABLE') as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9408498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9408498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.94185, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.94185, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                    and upper(\"table_name\") = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9428494, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\metadata.sql", "original_file_path": "macros\\metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9438498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9438498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\clone.sql", "original_file_path": "macros\\materializations\\clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.94485, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9508522, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9531777, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9538758, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9538758, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\dynamic_table.sql", "original_file_path": "macros\\materializations\\dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.954888, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9588895, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.964036, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9648914, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9668894, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9668894, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9678936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9678936, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9718878, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9718878, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.972903, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9758935, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9768925, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9768925, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9768925, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.977895, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9791658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9791658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9798954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9798954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\alter.sql", "original_file_path": "macros\\relations\\dynamic_table\\alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9818933, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\create.sql", "original_file_path": "macros\\relations\\dynamic_table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9818933, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\describe.sql", "original_file_path": "macros\\relations\\dynamic_table\\describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9828956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\drop.sql", "original_file_path": "macros\\relations\\dynamic_table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9828956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\refresh.sql", "original_file_path": "macros\\relations\\dynamic_table\\refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9838994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\dynamic_table\\replace.sql", "original_file_path": "macros\\relations\\dynamic_table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9838994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.989893, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.989893, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9908867, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9913855, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.993987, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.993987, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9958954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9958954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9958954, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9968948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9968948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9968948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9968948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9978929, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9978929, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9978929, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9989057, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9989057, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9989057, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553243.9989057, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0018504, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0018504, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0018504, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0018504, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.002894, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.002894, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.002894, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0038953, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0038953, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.004895, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.004895, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.004895, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0058994, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.006894, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.006894, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.006894, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0088952, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0121984, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0121984, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0131896, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0131896, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0141943, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.014312, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0152383, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0162833, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0162833, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0172923, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0172923, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0183418, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0192916, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.020249, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0212905, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0215926, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0222917, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0232928, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0232928, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0232928, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0242903, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0242903, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0242903, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0242903, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0283968, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0292916, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0292916, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.030295, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.030295, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.030295, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.030295, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0312932, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0312932, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0324116, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0324116, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0324116, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0332856, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0332856, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0332856, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0343058, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0352864, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0352864, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0352864, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0362854, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0362854, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0372877, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.039288, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.040289, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.040289, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.040289, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0414126, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0414126, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0422935, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0422935, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0422935, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0432906, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0432906, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0442894, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0442894, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0452938, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0452938, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0452938, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0462906, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0462906, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0462906, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0472908, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0472908, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.048292, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.048292, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.048292, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.048292, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0492914, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0492914, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0492914, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0502913, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0522923, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0542896, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0552928, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0552928, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0582936, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0592916, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0592916, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0602903, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0612907, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0612907, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0612907, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0622916, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0632932, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0632932, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0642912, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0642912, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0653987, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0653987, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0662959, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.067297, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.067297, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.069293, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.069293, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.069293, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0702918, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0702918, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0772865, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0772865, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0782871, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0802913, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0802913, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0812914, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.086286, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0909343, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0913432, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0913432, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0969312, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0969312, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0969312, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.0999277, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1009266, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1019273, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1019273, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1029265, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1114361, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1119223, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1210911, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1239355, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1239355, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1259332, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1259332, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1269352, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1349797, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.136982, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1390717, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1410816, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1419766, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1419766, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1429756, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1429756, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1429756, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1439795, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1439795, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1449797, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1449797, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1449797, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1459794, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1520934, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1547241, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1551034, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1551034, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1562614, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1562614, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1562614, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1562614, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1570926, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1570926, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1581254, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1581254, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1596794, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1647203, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1708305, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1714883, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1721232, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1721232, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1721232, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1721232, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1730716, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1740723, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.175071, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.175071, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1760716, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1852221, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.186326, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.186326, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1917639, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.192346, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.1943, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.19632, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.19632, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.197445, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.199311, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.201318, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2023222, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2023222, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2073143, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2073143, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2083154, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2103188, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2113256, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2124135, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2124135, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2135158, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2144513, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2144513, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2154515, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2164547, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2164547, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2174509, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2185829, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2185829, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2194107, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2204103, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2209818, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2209818, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2209818, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2219865, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2219865, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2229865, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2239866, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2239866, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2249866, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2249866, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2249866, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2269866, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.229193, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2299871, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.230987, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2314956, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2314956, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.232501, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.234068, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2350678, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.236068, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.236068, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.237068, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.237068, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2380679, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2380679, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2380679, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2392395, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2392395, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2392395, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2400682, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2400682, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2400682, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.241068, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.241068, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2426372, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2426372, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.243637, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2447157, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.245638, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.245638, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.245638, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2466376, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2466376, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2476373, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2476373, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2476373, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2486377, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2486377, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2496376, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2496376, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2506375, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2506375, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2506375, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2517054, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2517054, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2537103, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2537103, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2552826, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2562828, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2562828, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2562828, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.257283, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.257283, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.257283, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.258283, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.258283, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2594507, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2594507, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2602832, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2602832, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.261287, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.261287, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2623255, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2623255, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2643223, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2643223, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2643223, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2653217, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2653217, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2653217, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2653217, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2663224, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2663224, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2663224, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2663224, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2673175, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2673175, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2673175, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2683256, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2683256, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2683256, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2693214, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2703218, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2713213, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2716284, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2723198, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2723198, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2723198, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2733238, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2733238, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2744238, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2744238, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2755835, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.27647, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.27647, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.27747, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.27747, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.27747, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2784672, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2784672, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2784672, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2795835, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2795835, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2804298, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2804298, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2814682, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2814682, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2825677, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2825677, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2825677, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2836142, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2836142, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2836142, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.284709, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.284709, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.284709, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2857544, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2857544, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2867525, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2867525, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.287753, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.287753, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2887526, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2887526, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"name": "test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2979274, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"name": "test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.2989275, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"name": "test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3009255, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"name": "create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1708553245.9730566, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"name": "create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1708553245.974277, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"name": "create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1708553245.9770622, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"name": "create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3030334, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"name": "unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1708553245.9780612, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"name": "foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1708553245.9780612, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"name": "have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3040776, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"name": "have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3040776, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3050776, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3051853, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"name": "create_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros\\macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1708553245.9700563, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"name": "create_constraints_by_type", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.node.config.materialized == \"test\"\n            and res.status in (\"pass\", \"warn\")\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and ( res.failures == 0 or\n                  res.node.config.get(\"always_create_constraint\", false) )\n            and ( res.node.config.where is none or\n                  res.node.config.get(\"always_create_constraint\", false) )  -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\", \"seed\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\", \"seed\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots|seeds)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3210335, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"name": "table_columns_all_exist", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3219473, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"name": "lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3229554, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"name": "default__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.32396, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"name": "column_list_matches", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\create_constraints.sql", "original_file_path": "macros\\create_constraints.sql", "unique_id": "macro.dbt_constraints.column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.32396, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"name": "default__test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\default__test_constraints.sql", "original_file_path": "macros\\default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3269541, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"name": "default__test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\default__test_constraints.sql", "original_file_path": "macros\\default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3269541, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"name": "default__test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\default__test_constraints.sql", "original_file_path": "macros\\default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3289483, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"name": "get_quoted_column_list", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\default__test_constraints.sql", "original_file_path": "macros\\default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3289483, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\default__test_constraints.sql", "original_file_path": "macros\\default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.329952, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"name": "oracle__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3360462, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"name": "oracle__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3389058, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"name": "oracle__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3420305, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"name": "oracle__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3429067, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"name": "oracle__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3444693, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"name": "oracle__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.346474, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"name": "oracle__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.346474, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"name": "oracle__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.346474, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"name": "oracle__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.347474, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.347474, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\oracle__create_constraints.sql", "original_file_path": "macros\\oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.348474, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"name": "postgres__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3565195, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"name": "postgres__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3585198, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"name": "postgres__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3605206, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"name": "postgres__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3635023, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"name": "postgres__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3645146, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"name": "postgres__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3665168, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"name": "postgres__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3675141, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"name": "postgres__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3686016, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"name": "postgres__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.369476, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"name": "postgres__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3704925, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"name": "postgres__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\postgres__create_constraints.sql", "original_file_path": "macros\\postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3704925, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"name": "redshift__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.378517, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"name": "redshift__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3805156, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"name": "redshift__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3805156, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"name": "redshift__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3844764, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"name": "redshift__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3855155, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"name": "redshift__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3875775, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"name": "redshift__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.388507, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"name": "redshift__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3895192, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"name": "redshift__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3905191, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"name": "redshift__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3905191, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"name": "redshift__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\redshift__create_constraints.sql", "original_file_path": "macros\\redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.3905191, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"name": "snowflake__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} PRIMARY KEY ( {{ columns_csv }} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4005175, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"name": "snowflake__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} UNIQUE ( {{ columns_csv }} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4025183, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"name": "snowflake__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n{%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n{%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n{%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n{#- Check that the PK table has a PK or UK -#}\n{%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{ fk_table_relation }} ADD CONSTRAINT {{ constraint_name }} FOREIGN KEY ( {{ fk_columns_csv }} ) REFERENCES {{ pk_table_relation }} ( {{ pk_columns_csv }} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4055142, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"name": "snowflake__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n{%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n{%- set columns_to_change = [] -%}\n{%- for column_name in column_names if column_name not in existing_not_null_col -%}\n{%- do columns_to_change.append(column_name) -%}\n{%- do existing_not_null_col.append(column_name) -%}\n{%- endfor -%}\n{%- if columns_to_change|count > 0 -%}\n{%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n{%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set modify_statements= [] -%}\n                {%- for column in columns_list -%}\n                    {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n                {%- endfor -%}\n                {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n                {%- set query -%}\n                    ALTER TABLE {{ table_relation }} MODIFY {{ modify_statement_csv }};\n                {%- endset -%}\n                {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n                {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.40853, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"name": "snowflake__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.unique_keys -%}\n{%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n{%- for cached_columns in cached_unique_keys.values() -%}\n{%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n{%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(true) }}\n{%- endif -%}\n{% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW UNIQUE KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n{%- set lookup_query -%}\nSHOW PRIMARY KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n{#- If we get this far then the table does not have either constraint -#}\n{%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4119606, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"name": "snowflake__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.foreign_keys -%}\n{%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n{%- for cached_columns in cached_foreign_keys.values() -%}\n{%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n{%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(true) }}\n{%- endif -%}\n{% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW IMPORTED KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n{#- If we get this far then the table does not have this constraint -#}\n{%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4135222, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"name": "snowflake__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4145193, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"name": "snowflake__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4157994, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"name": "snowflake__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n{%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{ table_relation.database }}.information_schema.table_privileges tp\n        where is_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- set role_privilege_list = run_query(lookup_query) -%}\n\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{ table_relation.database }}.information_schema.table_privileges tp\n        where is_database_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- set db_role_privilege_list = run_query(lookup_query) -%}\n\n        {%- set privilege_list = role_privilege_list.merge([role_privilege_list, db_role_privilege_list]).distinct() -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n{%- set tab_priv_list = [] -%}\n{%- set schema_name = table_relation.schema|upper -%}\n{%- set table_name = table_relation.identifier|upper -%}\n{%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n{{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4175189, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"name": "snowflake__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\snowflake__create_constraints.sql", "original_file_path": "macros\\snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n{%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{ table_relation }}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n{{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.41952, "supported_languages": null}, "macro.dbt_constraints.vertica__create_primary_key": {"name": "vertica__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_primary_key", "macro_sql": "\n{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4295175, "supported_languages": null}, "macro.dbt_constraints.vertica__create_unique_key": {"name": "vertica__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_unique_key", "macro_sql": "\n{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4324768, "supported_languages": null}, "macro.dbt_constraints.vertica__create_foreign_key": {"name": "vertica__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_foreign_key", "macro_sql": "\n{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4345152, "supported_languages": null}, "macro.dbt_constraints.vertica__create_not_null": {"name": "vertica__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_not_null", "macro_sql": "\n{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4375186, "supported_languages": null}, "macro.dbt_constraints.vertica__unique_constraint_exists": {"name": "vertica__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__unique_constraint_exists", "macro_sql": "\n{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.441521, "supported_languages": null}, "macro.dbt_constraints.vertica__foreign_key_exists": {"name": "vertica__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__foreign_key_exists", "macro_sql": "\n{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4435148, "supported_languages": null}, "macro.dbt_constraints.vertica__have_references_priv": {"name": "vertica__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_references_priv", "macro_sql": "{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4445148, "supported_languages": null}, "macro.dbt_constraints.vertica__have_ownership_priv": {"name": "vertica__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_ownership_priv", "macro_sql": "{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.445517, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_privileges": {"name": "vertica__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_privileges", "macro_sql": "{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4475284, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_columns": {"name": "vertica__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_columns", "macro_sql": "{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4485185, "supported_languages": null}, "macro.dbt_constraints.vertica__get_create_index_sql": {"name": "vertica__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros\\vertica__create_constraints.sql", "original_file_path": "macros\\vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__get_create_index_sql", "macro_sql": "{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1708553244.4495149, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.recordtrak.data_refresh_timestamp": ["model.recordtrak.dim_business_units", "model.recordtrak.dim_clients", "model.recordtrak.dim_dates", "model.recordtrak.dim_defendants", "model.recordtrak.dim_firms", "model.recordtrak.dim_hold_requests", "model.recordtrak.dim_invoices", "model.recordtrak.dim_litigation_cases", "model.recordtrak.dim_masters", "model.recordtrak.dim_offices", "model.recordtrak.dim_payments", "model.recordtrak.dim_qc_jobs_queues", "model.recordtrak.dim_requests", "model.recordtrak.dim_stc_queues", "model.recordtrak.dim_tag_items", "model.recordtrak.dim_timesheets"], "model.recordtrak.dim_business_units": ["source.recordtrak.recordtrak.recordtrak_tblbill"], "model.recordtrak.dim_clients": ["source.recordtrak.recordtrak.recordtrak_tblclient"], "model.recordtrak.dim_dates": [], "model.recordtrak.dim_defendants": ["source.recordtrak.recordtrak.recordtrak_tbldefendant"], "model.recordtrak.dim_firms": ["source.recordtrak.recordtrak.recordtrak_tblfirm"], "model.recordtrak.dim_hold_requests": ["source.recordtrak.recordtrak.recordtrak_tblholdreq"], "model.recordtrak.dim_invoices": ["source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices"], "model.recordtrak.dim_litigation_cases": ["source.recordtrak.recordtrak.recordtrak_tbllitcase"], "model.recordtrak.dim_masters": ["source.recordtrak.recordtrak.recordtrak_tblmaster"], "model.recordtrak.dim_offices": ["source.recordtrak.recordtrak.recordtrak_tbloffice"], "model.recordtrak.dim_payments": ["source.recordtrak.recordtrak.recordtrak_accounting_tblpayments"], "model.recordtrak.dim_qc_jobs_queues": ["source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue"], "model.recordtrak.dim_requests": ["source.recordtrak.recordtrak.recordtrak_tblrequest"], "model.recordtrak.dim_stc_queues": ["source.recordtrak.recordtrak.recordtrak_tblstcqueue"], "model.recordtrak.dim_tag_items": ["source.recordtrak.recordtrak.recordtrak_tbltagitem"], "model.recordtrak.dim_timesheets": ["source.recordtrak.recordtrak.recordtrak_tbltimesheet"], "model.recordtrak.fact_invoices_payments": ["model.recordtrak.dim_business_units", "model.recordtrak.dim_clients", "model.recordtrak.dim_dates", "model.recordtrak.dim_defendants", "model.recordtrak.dim_firms", "model.recordtrak.dim_invoices", "model.recordtrak.dim_offices", "model.recordtrak.dim_payments"], "snapshot.recordtrak.snapshot_dim_budgets": ["source.recordtrak.raw_data.dailybudgets"], "snapshot.recordtrak.dim_goals": ["source.recordtrak.raw_data.monthlygoals"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.recordtrak.unique_dim_business_units_business_unit_key.7bdeb8856d": ["model.recordtrak.dim_business_units"], "test.recordtrak.dbt_constraints_primary_key_dim_business_units_business_unit_key.1e0870e9e4": ["model.recordtrak.dim_business_units"], "test.recordtrak.unique_dim_clients_client_key.a856337432": ["model.recordtrak.dim_clients"], "test.recordtrak.dbt_constraints_primary_key_dim_clients_client_key.85ba7be504": ["model.recordtrak.dim_clients"], "test.recordtrak.unique_dim_dates_date_key.61e1d0726d": ["model.recordtrak.dim_dates"], "test.recordtrak.dbt_constraints_primary_key_dim_dates_date_key.717b874c38": ["model.recordtrak.dim_dates"], "test.recordtrak.unique_dim_defendants_defendant_key.31a2304a21": ["model.recordtrak.dim_defendants"], "test.recordtrak.dbt_constraints_primary_key_dim_defendants_defendant_key.4c24f5aa4e": ["model.recordtrak.dim_defendants"], "test.recordtrak.unique_dim_firms_firm_key.ac725069f3": ["model.recordtrak.dim_firms"], "test.recordtrak.dbt_constraints_primary_key_dim_firms_firm_key.8268286281": ["model.recordtrak.dim_firms"], "test.recordtrak.unique_dim_hold_requests_hold_request_key.1a96257ea3": ["model.recordtrak.dim_hold_requests"], "test.recordtrak.dbt_constraints_primary_key_dim_hold_requests_hold_request_key.864cc79869": ["model.recordtrak.dim_hold_requests"], "test.recordtrak.unique_dim_invoices_invoice_key.b6406477d5": ["model.recordtrak.dim_invoices"], "test.recordtrak.dbt_constraints_primary_key_dim_invoices_invoice_key.19705b4d96": ["model.recordtrak.dim_invoices"], "test.recordtrak.unique_dim_litigation_cases_litigation_case_key.605f0a72e2": ["model.recordtrak.dim_litigation_cases"], "test.recordtrak.dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key.a5bfce6d6b": ["model.recordtrak.dim_litigation_cases"], "test.recordtrak.unique_dim_masters_master_key.27a78d86f0": ["model.recordtrak.dim_masters"], "test.recordtrak.dbt_constraints_primary_key_dim_masters_master_key.7be8a249f4": ["model.recordtrak.dim_masters"], "test.recordtrak.unique_dim_offices_office_key.33f0e00096": ["model.recordtrak.dim_offices"], "test.recordtrak.dbt_constraints_primary_key_dim_offices_office_key.27773ff184": ["model.recordtrak.dim_offices"], "test.recordtrak.unique_dim_payments_payment_key.97ee26d5a5": ["model.recordtrak.dim_payments"], "test.recordtrak.dbt_constraints_primary_key_dim_payments_payment_key.df6982c052": ["model.recordtrak.dim_payments"], "test.recordtrak.unique_dim_qc_jobs_queues_qc_jobs_queue_key.f50ad524cf": ["model.recordtrak.dim_qc_jobs_queues"], "test.recordtrak.dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key.e4581770f7": ["model.recordtrak.dim_qc_jobs_queues"], "test.recordtrak.unique_dim_requests_request_key.be885ee3b4": ["model.recordtrak.dim_requests"], "test.recordtrak.dbt_constraints_primary_key_dim_requests_request_key.75f9f0e52d": ["model.recordtrak.dim_requests"], "test.recordtrak.unique_dim_stc_queues_stc_queue_key.6002a1ec1b": ["model.recordtrak.dim_stc_queues"], "test.recordtrak.dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.c4f62c9a07": ["model.recordtrak.dim_stc_queues"], "test.recordtrak.unique_dim_tag_items_tag_item_key.133d0cc4f4": ["model.recordtrak.dim_tag_items"], "test.recordtrak.dbt_constraints_primary_key_dim_tag_items_tag_item_key.0ff9b0b569": ["model.recordtrak.dim_tag_items"], "test.recordtrak.unique_dim_timesheets_timesheet_key.2b7df327cb": ["model.recordtrak.dim_timesheets"], "test.recordtrak.dbt_constraints_primary_key_dim_timesheets_timesheet_key.e5c151506e": ["model.recordtrak.dim_timesheets"], "test.recordtrak.dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key.76a976fee8": ["model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219": ["model.recordtrak.dim_invoices", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6": ["model.recordtrak.dim_dates", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec": ["model.recordtrak.dim_masters", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb": ["model.recordtrak.dim_offices", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3": ["model.recordtrak.dim_business_units", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5": ["model.recordtrak.dim_defendants", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c": ["model.recordtrak.dim_clients", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87": ["model.recordtrak.dim_firms", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f": ["model.recordtrak.dim_payments", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8": ["model.recordtrak.dim_dates", "model.recordtrak.fact_invoices_payments"], "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid.00d07453f0": ["source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices"], "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid.260ceac882": ["source.recordtrak.recordtrak.recordtrak_accounting_tblpayments"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblclient_id_tblclient.dc2071cced": ["source.recordtrak.recordtrak.recordtrak_tblclient"], "test.recordtrak.source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant.6c49ba8102": ["source.recordtrak.recordtrak.recordtrak_tbldefendant"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.f8f6da3c35": ["source.recordtrak.recordtrak.recordtrak_tblfirm"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.4e3ead5b63": ["source.recordtrak.recordtrak.recordtrak_tblholdreq"], "test.recordtrak.source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.0e0efcc252": ["source.recordtrak.recordtrak.recordtrak_tbllitcase"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.0fa5ba92cf": ["source.recordtrak.recordtrak.recordtrak_tblmaster"], "test.recordtrak.source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.d6c9b0a120": ["source.recordtrak.recordtrak.recordtrak_tbloffice"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.357fc777e1": ["source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblrequest_sequenceid.0d6a1bc3bf": ["source.recordtrak.recordtrak.recordtrak_tblrequest"], "test.recordtrak.source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.5b14bdb7ed": ["source.recordtrak.recordtrak.recordtrak_tblstcqueue"], "test.recordtrak.source_unique_recordtrak_recordtrak_tbltagitem_nid.6996640826": ["source.recordtrak.recordtrak.recordtrak_tbltagitem"], "test.recordtrak.source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.d70fcea39e": ["source.recordtrak.recordtrak.recordtrak_tbltimesheet"], "test.recordtrak.source_unique_raw_data_monthlygoals_goal_month.ed2269a89b": ["source.recordtrak.raw_data.monthlygoals"], "test.recordtrak.source_unique_raw_data_dailybudgets_date.8a53dcbe3c": ["source.recordtrak.raw_data.dailybudgets"], "source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices": [], "source.recordtrak.recordtrak.recordtrak_accounting_tblpayments": [], "source.recordtrak.recordtrak.recordtrak_tblbill": [], "source.recordtrak.recordtrak.recordtrak_tblclient": [], "source.recordtrak.recordtrak.recordtrak_tbldefendant": [], "source.recordtrak.recordtrak.recordtrak_tblfirm": [], "source.recordtrak.recordtrak.recordtrak_tblholdreq": [], "source.recordtrak.recordtrak.recordtrak_tbllitcase": [], "source.recordtrak.recordtrak.recordtrak_tblmaster": [], "source.recordtrak.recordtrak.recordtrak_tbloffice": [], "source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue": [], "source.recordtrak.recordtrak.recordtrak_tblrequest": [], "source.recordtrak.recordtrak.recordtrak_tblstcqueue": [], "source.recordtrak.recordtrak.recordtrak_tbltagitem": [], "source.recordtrak.recordtrak.recordtrak_tbltimesheet": [], "source.recordtrak.raw_data.monthlygoals": [], "source.recordtrak.raw_data.dailybudgets": []}, "child_map": {"model.recordtrak.data_refresh_timestamp": [], "model.recordtrak.dim_business_units": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3", "test.recordtrak.dbt_constraints_primary_key_dim_business_units_business_unit_key.1e0870e9e4", "test.recordtrak.unique_dim_business_units_business_unit_key.7bdeb8856d"], "model.recordtrak.dim_clients": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c", "test.recordtrak.dbt_constraints_primary_key_dim_clients_client_key.85ba7be504", "test.recordtrak.unique_dim_clients_client_key.a856337432"], "model.recordtrak.dim_dates": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8", "test.recordtrak.dbt_constraints_primary_key_dim_dates_date_key.717b874c38", "test.recordtrak.unique_dim_dates_date_key.61e1d0726d"], "model.recordtrak.dim_defendants": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5", "test.recordtrak.dbt_constraints_primary_key_dim_defendants_defendant_key.4c24f5aa4e", "test.recordtrak.unique_dim_defendants_defendant_key.31a2304a21"], "model.recordtrak.dim_firms": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87", "test.recordtrak.dbt_constraints_primary_key_dim_firms_firm_key.8268286281", "test.recordtrak.unique_dim_firms_firm_key.ac725069f3"], "model.recordtrak.dim_hold_requests": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_hold_requests_hold_request_key.864cc79869", "test.recordtrak.unique_dim_hold_requests_hold_request_key.1a96257ea3"], "model.recordtrak.dim_invoices": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219", "test.recordtrak.dbt_constraints_primary_key_dim_invoices_invoice_key.19705b4d96", "test.recordtrak.unique_dim_invoices_invoice_key.b6406477d5"], "model.recordtrak.dim_litigation_cases": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key.a5bfce6d6b", "test.recordtrak.unique_dim_litigation_cases_litigation_case_key.605f0a72e2"], "model.recordtrak.dim_masters": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec", "test.recordtrak.dbt_constraints_primary_key_dim_masters_master_key.7be8a249f4", "test.recordtrak.unique_dim_masters_master_key.27a78d86f0"], "model.recordtrak.dim_offices": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb", "test.recordtrak.dbt_constraints_primary_key_dim_offices_office_key.27773ff184", "test.recordtrak.unique_dim_offices_office_key.33f0e00096"], "model.recordtrak.dim_payments": ["model.recordtrak.data_refresh_timestamp", "model.recordtrak.fact_invoices_payments", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f", "test.recordtrak.dbt_constraints_primary_key_dim_payments_payment_key.df6982c052", "test.recordtrak.unique_dim_payments_payment_key.97ee26d5a5"], "model.recordtrak.dim_qc_jobs_queues": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key.e4581770f7", "test.recordtrak.unique_dim_qc_jobs_queues_qc_jobs_queue_key.f50ad524cf"], "model.recordtrak.dim_requests": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_requests_request_key.75f9f0e52d", "test.recordtrak.unique_dim_requests_request_key.be885ee3b4"], "model.recordtrak.dim_stc_queues": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.c4f62c9a07", "test.recordtrak.unique_dim_stc_queues_stc_queue_key.6002a1ec1b"], "model.recordtrak.dim_tag_items": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_tag_items_tag_item_key.0ff9b0b569", "test.recordtrak.unique_dim_tag_items_tag_item_key.133d0cc4f4"], "model.recordtrak.dim_timesheets": ["model.recordtrak.data_refresh_timestamp", "test.recordtrak.dbt_constraints_primary_key_dim_timesheets_timesheet_key.e5c151506e", "test.recordtrak.unique_dim_timesheets_timesheet_key.2b7df327cb"], "model.recordtrak.fact_invoices_payments": ["test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8", "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f", "test.recordtrak.dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key.76a976fee8"], "snapshot.recordtrak.snapshot_dim_budgets": [], "snapshot.recordtrak.dim_goals": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.recordtrak.unique_dim_business_units_business_unit_key.7bdeb8856d": [], "test.recordtrak.dbt_constraints_primary_key_dim_business_units_business_unit_key.1e0870e9e4": [], "test.recordtrak.unique_dim_clients_client_key.a856337432": [], "test.recordtrak.dbt_constraints_primary_key_dim_clients_client_key.85ba7be504": [], "test.recordtrak.unique_dim_dates_date_key.61e1d0726d": [], "test.recordtrak.dbt_constraints_primary_key_dim_dates_date_key.717b874c38": [], "test.recordtrak.unique_dim_defendants_defendant_key.31a2304a21": [], "test.recordtrak.dbt_constraints_primary_key_dim_defendants_defendant_key.4c24f5aa4e": [], "test.recordtrak.unique_dim_firms_firm_key.ac725069f3": [], "test.recordtrak.dbt_constraints_primary_key_dim_firms_firm_key.8268286281": [], "test.recordtrak.unique_dim_hold_requests_hold_request_key.1a96257ea3": [], "test.recordtrak.dbt_constraints_primary_key_dim_hold_requests_hold_request_key.864cc79869": [], "test.recordtrak.unique_dim_invoices_invoice_key.b6406477d5": [], "test.recordtrak.dbt_constraints_primary_key_dim_invoices_invoice_key.19705b4d96": [], "test.recordtrak.unique_dim_litigation_cases_litigation_case_key.605f0a72e2": [], "test.recordtrak.dbt_constraints_primary_key_dim_litigation_cases_litigation_case_key.a5bfce6d6b": [], "test.recordtrak.unique_dim_masters_master_key.27a78d86f0": [], "test.recordtrak.dbt_constraints_primary_key_dim_masters_master_key.7be8a249f4": [], "test.recordtrak.unique_dim_offices_office_key.33f0e00096": [], "test.recordtrak.dbt_constraints_primary_key_dim_offices_office_key.27773ff184": [], "test.recordtrak.unique_dim_payments_payment_key.97ee26d5a5": [], "test.recordtrak.dbt_constraints_primary_key_dim_payments_payment_key.df6982c052": [], "test.recordtrak.unique_dim_qc_jobs_queues_qc_jobs_queue_key.f50ad524cf": [], "test.recordtrak.dbt_constraints_primary_key_dim_qc_jobs_queues_qc_jobs_queue_key.e4581770f7": [], "test.recordtrak.unique_dim_requests_request_key.be885ee3b4": [], "test.recordtrak.dbt_constraints_primary_key_dim_requests_request_key.75f9f0e52d": [], "test.recordtrak.unique_dim_stc_queues_stc_queue_key.6002a1ec1b": [], "test.recordtrak.dbt_constraints_primary_key_dim_stc_queues_stc_queue_key.c4f62c9a07": [], "test.recordtrak.unique_dim_tag_items_tag_item_key.133d0cc4f4": [], "test.recordtrak.dbt_constraints_primary_key_dim_tag_items_tag_item_key.0ff9b0b569": [], "test.recordtrak.unique_dim_timesheets_timesheet_key.2b7df327cb": [], "test.recordtrak.dbt_constraints_primary_key_dim_timesheets_timesheet_key.e5c151506e": [], "test.recordtrak.dbt_constraints_primary_key_fact_invoices_payments_invoice_payment_key.76a976fee8": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_key__invoice_key__ref_dim_invoices_.60a7763219": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_invoice_date_key__date_key__ref_dim_dates_.05afca25a6": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_master_key__master_key__ref_dim_masters_.f82a9412ec": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_office_key__office_key__ref_dim_offices_.6764d560eb": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_business_unit_key__business_unit_key__ref_dim_business_units_.94a032b0d3": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_defendant_key__defendant_key__ref_dim_defendants_.255eb58bc5": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_client_key__client_key__ref_dim_clients_.dc9e52976c": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_firm_key__firm_key__ref_dim_firms_.16dbc6de87": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_key__payment_key__ref_dim_payments_.bf609e196f": [], "test.recordtrak.dbt_constraints_foreign_key_fact_invoices_payments_payment_date_key__date_key__ref_dim_dates_.a23591c3b8": [], "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid.00d07453f0": [], "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid.260ceac882": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblclient_id_tblclient.dc2071cced": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant.6c49ba8102": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.f8f6da3c35": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.4e3ead5b63": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.0e0efcc252": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.0fa5ba92cf": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.d6c9b0a120": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.357fc777e1": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblrequest_sequenceid.0d6a1bc3bf": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.5b14bdb7ed": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tbltagitem_nid.6996640826": [], "test.recordtrak.source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.d70fcea39e": [], "test.recordtrak.source_unique_raw_data_monthlygoals_goal_month.ed2269a89b": [], "test.recordtrak.source_unique_raw_data_dailybudgets_date.8a53dcbe3c": [], "source.recordtrak.recordtrak.recordtrak_accounting_tblinvoices": ["model.recordtrak.dim_invoices", "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblinvoices_sequenceid.00d07453f0"], "source.recordtrak.recordtrak.recordtrak_accounting_tblpayments": ["model.recordtrak.dim_payments", "test.recordtrak.source_unique_recordtrak_recordtrak_accounting_tblpayments_sequenceid.260ceac882"], "source.recordtrak.recordtrak.recordtrak_tblbill": ["model.recordtrak.dim_business_units"], "source.recordtrak.recordtrak.recordtrak_tblclient": ["model.recordtrak.dim_clients", "test.recordtrak.source_unique_recordtrak_recordtrak_tblclient_id_tblclient.dc2071cced"], "source.recordtrak.recordtrak.recordtrak_tbldefendant": ["model.recordtrak.dim_defendants", "test.recordtrak.source_unique_recordtrak_recordtrak_tbldefendant_id_tbldefendant.6c49ba8102"], "source.recordtrak.recordtrak.recordtrak_tblfirm": ["model.recordtrak.dim_firms", "test.recordtrak.source_unique_recordtrak_recordtrak_tblfirm_id_tblfirm.f8f6da3c35"], "source.recordtrak.recordtrak.recordtrak_tblholdreq": ["model.recordtrak.dim_hold_requests", "test.recordtrak.source_unique_recordtrak_recordtrak_tblholdreq_sequenceid.4e3ead5b63"], "source.recordtrak.recordtrak.recordtrak_tbllitcase": ["model.recordtrak.dim_litigation_cases", "test.recordtrak.source_unique_recordtrak_recordtrak_tbllitcase_sequenceid.0e0efcc252"], "source.recordtrak.recordtrak.recordtrak_tblmaster": ["model.recordtrak.dim_masters", "test.recordtrak.source_unique_recordtrak_recordtrak_tblmaster_id_tblmaster.0fa5ba92cf"], "source.recordtrak.recordtrak.recordtrak_tbloffice": ["model.recordtrak.dim_offices", "test.recordtrak.source_unique_recordtrak_recordtrak_tbloffice_id_tbloffice.d6c9b0a120"], "source.recordtrak.recordtrak.recordtrak_tblqcjobsqueue": ["model.recordtrak.dim_qc_jobs_queues", "test.recordtrak.source_unique_recordtrak_recordtrak_tblqcjobsqueue_qc_sequence.357fc777e1"], "source.recordtrak.recordtrak.recordtrak_tblrequest": ["model.recordtrak.dim_requests", "test.recordtrak.source_unique_recordtrak_recordtrak_tblrequest_sequenceid.0d6a1bc3bf"], "source.recordtrak.recordtrak.recordtrak_tblstcqueue": ["model.recordtrak.dim_stc_queues", "test.recordtrak.source_unique_recordtrak_recordtrak_tblstcqueue_sequenceid.5b14bdb7ed"], "source.recordtrak.recordtrak.recordtrak_tbltagitem": ["model.recordtrak.dim_tag_items", "test.recordtrak.source_unique_recordtrak_recordtrak_tbltagitem_nid.6996640826"], "source.recordtrak.recordtrak.recordtrak_tbltimesheet": ["model.recordtrak.dim_timesheets", "test.recordtrak.source_unique_recordtrak_recordtrak_tbltimesheet_sequenceid.d70fcea39e"], "source.recordtrak.raw_data.monthlygoals": ["snapshot.recordtrak.dim_goals", "test.recordtrak.source_unique_raw_data_monthlygoals_goal_month.ed2269a89b"], "source.recordtrak.raw_data.dailybudgets": ["snapshot.recordtrak.snapshot_dim_budgets", "test.recordtrak.source_unique_raw_data_dailybudgets_date.8a53dcbe3c"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}